(*
tau41 = -0.00100000,  kk = -1000,  {gmin,gmax} = {0.16279802160643481044, 0.69092998948554228120},  Span = 0.528
tau41 = -0.000900000,  kk = -900,  {gmin,gmax} = {0.16233601108691411029, 0.69025427891382164893},  Span = 0.528
tau41 = -0.000800000,  kk = -800,  {gmin,gmax} = {0.16189513336967334912, 0.68952985662232059284},  Span = 0.528
tau41 = -0.000700000,  kk = -700,  {gmin,gmax} = {0.16148452721525609866, 0.68874718195734811244},  Span = 0.527
tau41 = -0.000600000,  kk = -600,  {gmin,gmax} = {0.16111863162370756157, 0.68789314293481724707},  Span = 0.527
tau41 = -0.000500000,  kk = -500,  {gmin,gmax} = {0.16082203206681938148, 0.68694885037128683526},  Span = 0.526
tau41 = -0.000400000,  kk = -400,  {gmin,gmax} = {0.16064125869961470080, 0.68588529431703618497},  Span = 0.525
*)

(* ================================================================= *)

ccmin = 1.0;
ccmax = 0.0;

Do[

a = {{ a11, a12, a13, a14, a15 },
     { a21, a22, a23, a24, a25 },
     { a31, a32, a33, a34, a35 },
     { a41, a42, a43, a44, a45 },
     {  b1,  b2,  b3,  b4,  b5 }};
b =  {  b1,  b2,  b3,  b4,  b5 };
c =  {  c1,  c2,  c3,  c4,  c5 };
e =  {   1,   1,   1,   1,   1 };

tau41  = Rationalize[-0.000500,10^(-7)];
fac    = Rationalize[ RandomReal[{5,11}],10^(-2)];
x      = tau41*fac;
g      = 162/1000;
S      = 5;
ddmax  = +2.25;
mMin   = -1.5;
mMinInt= -1.75;
lenMax = 1;
print  = 0;

c1 = Rationalize[ RandomReal[{0.150,0.960}], 10^(-5) ];
c2 = Rationalize[ RandomReal[{0.150,0.960}], 10^(-5) ];
c3 = Rationalize[ RandomReal[{0.150,0.960}], 10^(-5) ];
c4 = Rationalize[ RandomReal[{0.150,0.960}], 10^(-5) ];
c5 = 1;

ccc = {1/5,2/5,3/5,4/5,5/5};
cmeasure = Sqrt[N[(c-ccc).(c-ccc)]];

If[ cmeasure < 0.15,


(* ================================================================= *)

 a11 = -(-3*c1^4 + 4*c1^3*c2 - 4*c1^3*c2^2 + 3*c1^4*c2^2 + 4*c1^3*c3 - 
   6*c1^2*c2*c3 - 4*c1^3*c2*c3 + 3*c1^4*c2*c3 + 6*c1^2*c2^2*c3 - 
   3*c1^4*c2^2*c3 - 4*c1^3*c3^2 + 3*c1^4*c3^2 + 6*c1^2*c2*c3^2 - 
   3*c1^4*c2*c3^2 - 6*c1^2*c2^2*c3^2 + 4*c1^3*c2^2*c3^2 + 4*c1^3*c4 - 
   6*c1^2*c2*c4 - 4*c1^3*c2*c4 + 3*c1^4*c2*c4 + 6*c1^2*c2^2*c4 - 
   3*c1^4*c2^2*c4 - 6*c1^2*c3*c4 - 4*c1^3*c3*c4 + 3*c1^4*c3*c4 + 
   12*c1*c2*c3*c4 + 12*c1^2*c2*c3*c4 - 6*c1^4*c2*c3*c4 - 12*c1*c2^2*c3*c4 - 
   6*c1^2*c2^2*c3*c4 + 4*c1^3*c2^2*c3*c4 + 3*c1^4*c2^2*c3*c4 + 
   6*c1^2*c3^2*c4 - 3*c1^4*c3^2*c4 - 12*c1*c2*c3^2*c4 - 6*c1^2*c2*c3^2*c4 + 
   4*c1^3*c2*c3^2*c4 + 3*c1^4*c2*c3^2*c4 + 12*c1*c2^2*c3^2*c4 - 
   4*c1^3*c2^2*c3^2*c4 - 4*c1^3*c4^2 + 3*c1^4*c4^2 + 6*c1^2*c2*c4^2 - 
   3*c1^4*c2*c4^2 - 6*c1^2*c2^2*c4^2 + 4*c1^3*c2^2*c4^2 + 6*c1^2*c3*c4^2 - 
   3*c1^4*c3*c4^2 - 12*c1*c2*c3*c4^2 - 6*c1^2*c2*c3*c4^2 + 
   4*c1^3*c2*c3*c4^2 + 3*c1^4*c2*c3*c4^2 + 12*c1*c2^2*c3*c4^2 - 
   4*c1^3*c2^2*c3*c4^2 - 6*c1^2*c3^2*c4^2 + 4*c1^3*c3^2*c4^2 + 
   12*c1*c2*c3^2*c4^2 - 4*c1^3*c2*c3^2*c4^2 - 12*c1*c2^2*c3^2*c4^2 + 
   6*c1^2*c2^2*c3^2*c4^2 + 60*c1^4*g - 60*c1^4*c2*g - 60*c1^4*c3*g + 
   60*c1^4*c2*c3*g - 60*c1^4*c4*g + 60*c1^4*c2*c4*g + 60*c1^4*c3*c4*g - 
   60*c1^4*c2*c3*c4*g - 480*c1^3*g^2 + 480*c1^3*c2*g^2 + 480*c1^3*c3*g^2 - 
   480*c1^3*c2*c3*g^2 + 480*c1^3*c4*g^2 - 480*c1^3*c2*c4*g^2 - 
   480*c1^3*c3*c4*g^2 + 480*c1^3*c2*c3*c4*g^2 + 1440*c1^2*g^3 - 
   1440*c1^2*c2*g^3 - 1440*c1^2*c3*g^3 + 1440*c1^2*c2*c3*g^3 - 
   1440*c1^2*c4*g^3 + 1440*c1^2*c2*c4*g^3 + 1440*c1^2*c3*c4*g^3 - 
   1440*c1^2*c2*c3*c4*g^3 - 1440*c1*g^4 + 1440*c1*c2*g^4 + 1440*c1*c3*g^4 - 
   1440*c1*c2*c3*g^4 + 1440*c1*c4*g^4 - 1440*c1*c2*c4*g^4 - 
   1440*c1*c3*c4*g^4 + 1440*c1*c2*c3*c4*g^4 + 288*g^5 - 288*c2*g^5 - 
   288*c3*g^5 + 288*c2*c3*g^5 - 288*c4*g^5 + 288*c2*c4*g^5 + 288*c3*c4*g^5 - 
   288*c2*c3*c4*g^5 - 72*c1^4*tau41 + 96*c1^3*c2*tau41 + 96*c1^3*c3*tau41 - 
   144*c1^2*c2*c3*tau41 + 96*c1^3*c4*tau41 - 144*c1^2*c2*c4*tau41 - 
   144*c1^2*c3*c4*tau41 + 288*c1*c2*c3*c4*tau41 - 12*x - 48*c1*x + 
   12*c1^4*x + 48*c1*c2*x - 16*c1^3*c2*x + 12*c2^2*x + 48*c1*c3*x - 
   16*c1^3*c3*x + 12*c2*c3*x - 48*c1*c2*c3*x + 24*c1^2*c2*c3*x - 
   12*c2^2*c3*x + 12*c3^2*x - 12*c2*c3^2*x + 48*c1*c4*x - 16*c1^3*c4*x + 
   12*c2*c4*x - 48*c1*c2*c4*x + 24*c1^2*c2*c4*x - 12*c2^2*c4*x + 12*c3*c4*x - 
   48*c1*c3*c4*x + 24*c1^2*c3*c4*x - 24*c2*c3*c4*x + 12*c2^2*c3*c4*x - 
   12*c3^2*c4*x + 12*c2*c3^2*c4*x + 12*c4^2*x - 12*c2*c4^2*x - 12*c3*c4^2*x + 
   12*c2*c3*c4^2*x + 240*g*x - 240*c2*g*x - 240*c3*g*x + 240*c2*c3*g*x - 
   240*c4*g*x + 240*c2*c4*g*x + 240*c3*c4*g*x - 240*c2*c3*c4*g*x - 
   288*tau41*x + 48*x^2)/(12*(c1 - c2)*(c1 - c3)*(c1 - c4)*
  (1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - 
   c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 a12 = (c1^4 - 4*c1^5 + 3*c1^6 - 2*c1^3*c3 + 2*c1^4*c3 + 3*c1^5*c3 - 
  3*c1^6*c3 + 2*c1^3*c3^2 - 3*c1^4*c3^2 + c1^5*c3^2 - 2*c1^3*c4 + 2*c1^4*c4 + 
  3*c1^5*c4 - 3*c1^6*c4 + 6*c1^2*c3*c4 - 4*c1^3*c3*c4 - 3*c1^4*c3*c4 - 
  2*c1^5*c3*c4 + 3*c1^6*c3*c4 - 6*c1^2*c3^2*c4 + 6*c1^3*c3^2*c4 + 
  c1^4*c3^2*c4 - c1^5*c3^2*c4 + 2*c1^3*c4^2 - 3*c1^4*c4^2 + c1^5*c4^2 - 
  6*c1^2*c3*c4^2 + 6*c1^3*c3*c4^2 + c1^4*c3*c4^2 - c1^5*c3*c4^2 + 
  6*c1^2*c3^2*c4^2 - 8*c1^3*c3^2*c4^2 + 2*c1^4*c3^2*c4^2 + 60*c1^4*g - 
  60*c1^5*g - 60*c1^4*c3*g + 60*c1^5*c3*g - 60*c1^4*c4*g + 60*c1^5*c4*g + 
  60*c1^4*c3*c4*g - 60*c1^5*c3*c4*g - 480*c1^3*g^2 + 480*c1^4*g^2 + 
  480*c1^3*c3*g^2 - 480*c1^4*c3*g^2 + 480*c1^3*c4*g^2 - 480*c1^4*c4*g^2 - 
  480*c1^3*c3*c4*g^2 + 480*c1^4*c3*c4*g^2 + 1440*c1^2*g^3 - 1440*c1^3*g^3 - 
  1440*c1^2*c3*g^3 + 1440*c1^3*c3*g^3 - 1440*c1^2*c4*g^3 + 1440*c1^3*c4*g^3 + 
  1440*c1^2*c3*c4*g^3 - 1440*c1^3*c3*c4*g^3 - 1440*c1*g^4 + 1440*c1^2*g^4 + 
  1440*c1*c3*g^4 - 1440*c1^2*c3*g^4 + 1440*c1*c4*g^4 - 1440*c1^2*c4*g^4 - 
  1440*c1*c3*c4*g^4 + 1440*c1^2*c3*c4*g^4 + 288*g^5 - 288*c1*g^5 - 
  288*c3*g^5 + 288*c1*c3*g^5 - 288*c4*g^5 + 288*c1*c4*g^5 + 288*c3*c4*g^5 - 
  288*c1*c3*c4*g^5 + 24*c1^4*tau41 - 48*c1^3*c3*tau41 - 48*c1^3*c4*tau41 + 
  144*c1^2*c3*c4*tau41 - 12*x - 48*c1*x + 60*c1^2*x - 4*c1^4*x + 60*c1*c3*x - 
  60*c1^2*c3*x + 8*c1^3*c3*x + 12*c3^2*x - 12*c1*c3^2*x + 60*c1*c4*x - 
  60*c1^2*c4*x + 8*c1^3*c4*x + 12*c3*c4*x - 72*c1*c3*c4*x + 36*c1^2*c3*c4*x - 
  12*c3^2*c4*x + 12*c1*c3^2*c4*x + 12*c4^2*x - 12*c1*c4^2*x - 12*c3*c4^2*x + 
  12*c1*c3*c4^2*x + 240*g*x - 240*c1*g*x - 240*c3*g*x + 240*c1*c3*g*x - 
  240*c4*g*x + 240*c1*c4*g*x + 240*c3*c4*g*x - 240*c1*c3*c4*g*x - 
  288*tau41*x + 48*x^2)/(12*(c1 - c2)*(c2 - c3)*(c2 - c4)*
  (1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - 
   c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 a13 = (c1^4 - 4*c1^5 + 3*c1^6 - 2*c1^3*c2 + 2*c1^4*c2 + 3*c1^5*c2 - 
  3*c1^6*c2 + 2*c1^3*c2^2 - 3*c1^4*c2^2 + c1^5*c2^2 - 2*c1^3*c4 + 2*c1^4*c4 + 
  3*c1^5*c4 - 3*c1^6*c4 + 6*c1^2*c2*c4 - 4*c1^3*c2*c4 - 3*c1^4*c2*c4 - 
  2*c1^5*c2*c4 + 3*c1^6*c2*c4 - 6*c1^2*c2^2*c4 + 6*c1^3*c2^2*c4 + 
  c1^4*c2^2*c4 - c1^5*c2^2*c4 + 2*c1^3*c4^2 - 3*c1^4*c4^2 + c1^5*c4^2 - 
  6*c1^2*c2*c4^2 + 6*c1^3*c2*c4^2 + c1^4*c2*c4^2 - c1^5*c2*c4^2 + 
  6*c1^2*c2^2*c4^2 - 8*c1^3*c2^2*c4^2 + 2*c1^4*c2^2*c4^2 + 60*c1^4*g - 
  60*c1^5*g - 60*c1^4*c2*g + 60*c1^5*c2*g - 60*c1^4*c4*g + 60*c1^5*c4*g + 
  60*c1^4*c2*c4*g - 60*c1^5*c2*c4*g - 480*c1^3*g^2 + 480*c1^4*g^2 + 
  480*c1^3*c2*g^2 - 480*c1^4*c2*g^2 + 480*c1^3*c4*g^2 - 480*c1^4*c4*g^2 - 
  480*c1^3*c2*c4*g^2 + 480*c1^4*c2*c4*g^2 + 1440*c1^2*g^3 - 1440*c1^3*g^3 - 
  1440*c1^2*c2*g^3 + 1440*c1^3*c2*g^3 - 1440*c1^2*c4*g^3 + 1440*c1^3*c4*g^3 + 
  1440*c1^2*c2*c4*g^3 - 1440*c1^3*c2*c4*g^3 - 1440*c1*g^4 + 1440*c1^2*g^4 + 
  1440*c1*c2*g^4 - 1440*c1^2*c2*g^4 + 1440*c1*c4*g^4 - 1440*c1^2*c4*g^4 - 
  1440*c1*c2*c4*g^4 + 1440*c1^2*c2*c4*g^4 + 288*g^5 - 288*c1*g^5 - 
  288*c2*g^5 + 288*c1*c2*g^5 - 288*c4*g^5 + 288*c1*c4*g^5 + 288*c2*c4*g^5 - 
  288*c1*c2*c4*g^5 + 24*c1^4*tau41 - 48*c1^3*c2*tau41 - 48*c1^3*c4*tau41 + 
  144*c1^2*c2*c4*tau41 - 12*x - 48*c1*x + 60*c1^2*x - 4*c1^4*x + 60*c1*c2*x - 
  60*c1^2*c2*x + 8*c1^3*c2*x + 12*c2^2*x - 12*c1*c2^2*x + 60*c1*c4*x - 
  60*c1^2*c4*x + 8*c1^3*c4*x + 12*c2*c4*x - 72*c1*c2*c4*x + 36*c1^2*c2*c4*x - 
  12*c2^2*c4*x + 12*c1*c2^2*c4*x + 12*c4^2*x - 12*c1*c4^2*x - 12*c2*c4^2*x + 
  12*c1*c2*c4^2*x + 240*g*x - 240*c1*g*x - 240*c2*g*x + 240*c1*c2*g*x - 
  240*c4*g*x + 240*c1*c4*g*x + 240*c2*c4*g*x - 240*c1*c2*c4*g*x - 
  288*tau41*x + 48*x^2)/(12*(c1 - c3)*(-c2 + c3)*(c3 - c4)*
  (1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - 
   c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 a14 = (c1^4 - 4*c1^5 + 3*c1^6 - 2*c1^3*c2 + 2*c1^4*c2 + 3*c1^5*c2 - 
  3*c1^6*c2 + 2*c1^3*c2^2 - 3*c1^4*c2^2 + c1^5*c2^2 - 2*c1^3*c3 + 2*c1^4*c3 + 
  3*c1^5*c3 - 3*c1^6*c3 + 6*c1^2*c2*c3 - 4*c1^3*c2*c3 - 3*c1^4*c2*c3 - 
  2*c1^5*c2*c3 + 3*c1^6*c2*c3 - 6*c1^2*c2^2*c3 + 6*c1^3*c2^2*c3 + 
  c1^4*c2^2*c3 - c1^5*c2^2*c3 + 2*c1^3*c3^2 - 3*c1^4*c3^2 + c1^5*c3^2 - 
  6*c1^2*c2*c3^2 + 6*c1^3*c2*c3^2 + c1^4*c2*c3^2 - c1^5*c2*c3^2 + 
  6*c1^2*c2^2*c3^2 - 8*c1^3*c2^2*c3^2 + 2*c1^4*c2^2*c3^2 + 60*c1^4*g - 
  60*c1^5*g - 60*c1^4*c2*g + 60*c1^5*c2*g - 60*c1^4*c3*g + 60*c1^5*c3*g + 
  60*c1^4*c2*c3*g - 60*c1^5*c2*c3*g - 480*c1^3*g^2 + 480*c1^4*g^2 + 
  480*c1^3*c2*g^2 - 480*c1^4*c2*g^2 + 480*c1^3*c3*g^2 - 480*c1^4*c3*g^2 - 
  480*c1^3*c2*c3*g^2 + 480*c1^4*c2*c3*g^2 + 1440*c1^2*g^3 - 1440*c1^3*g^3 - 
  1440*c1^2*c2*g^3 + 1440*c1^3*c2*g^3 - 1440*c1^2*c3*g^3 + 1440*c1^3*c3*g^3 + 
  1440*c1^2*c2*c3*g^3 - 1440*c1^3*c2*c3*g^3 - 1440*c1*g^4 + 1440*c1^2*g^4 + 
  1440*c1*c2*g^4 - 1440*c1^2*c2*g^4 + 1440*c1*c3*g^4 - 1440*c1^2*c3*g^4 - 
  1440*c1*c2*c3*g^4 + 1440*c1^2*c2*c3*g^4 + 288*g^5 - 288*c1*g^5 - 
  288*c2*g^5 + 288*c1*c2*g^5 - 288*c3*g^5 + 288*c1*c3*g^5 + 288*c2*c3*g^5 - 
  288*c1*c2*c3*g^5 + 24*c1^4*tau41 - 48*c1^3*c2*tau41 - 48*c1^3*c3*tau41 + 
  144*c1^2*c2*c3*tau41 - 12*x - 48*c1*x + 60*c1^2*x - 4*c1^4*x + 60*c1*c2*x - 
  60*c1^2*c2*x + 8*c1^3*c2*x + 12*c2^2*x - 12*c1*c2^2*x + 60*c1*c3*x - 
  60*c1^2*c3*x + 8*c1^3*c3*x + 12*c2*c3*x - 72*c1*c2*c3*x + 36*c1^2*c2*c3*x - 
  12*c2^2*c3*x + 12*c1*c2^2*c3*x + 12*c3^2*x - 12*c1*c3^2*x - 12*c2*c3^2*x + 
  12*c1*c2*c3^2*x + 240*g*x - 240*c1*g*x - 240*c2*g*x + 240*c1*c2*g*x - 
  240*c3*g*x + 240*c1*c3*g*x + 240*c2*c3*g*x - 240*c1*c2*c3*g*x - 
  288*tau41*x + 48*x^2)/(12*(c1 - c4)*(-c2 + c4)*(-c3 + c4)*
  (1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - 
   c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 a15 = -(3*c1^5 - c1^4*c2 - c1^4*c3 + 2*c1^3*c2*c3 - c1^4*c4 + 
   2*c1^3*c2*c4 + 2*c1^3*c3*c4 - 6*c1^2*c2*c3*c4 - 60*c1^4*g + 480*c1^3*g^2 - 
   1440*c1^2*g^3 + 1440*c1*g^4 - 288*g^5 + 60*c1*x + 12*c2*x + 12*c3*x + 
   12*c4*x - 240*g*x)/(12*(1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - 
   c1*c2*c3 - c4 + c1*c4 + c2*c4 - c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + 
   c1*c2*c3*c4 + 24*tau41 - 4*x));
 a21 = -(c2^4 - 4*c2^5 + 3*c2^6 - 2*c2^3*c3 + 2*c2^4*c3 + 3*c2^5*c3 - 
   3*c2^6*c3 + 2*c2^3*c3^2 - 3*c2^4*c3^2 + c2^5*c3^2 - 2*c2^3*c4 + 
   2*c2^4*c4 + 3*c2^5*c4 - 3*c2^6*c4 + 6*c2^2*c3*c4 - 4*c2^3*c3*c4 - 
   3*c2^4*c3*c4 - 2*c2^5*c3*c4 + 3*c2^6*c3*c4 - 6*c2^2*c3^2*c4 + 
   6*c2^3*c3^2*c4 + c2^4*c3^2*c4 - c2^5*c3^2*c4 + 2*c2^3*c4^2 - 3*c2^4*c4^2 + 
   c2^5*c4^2 - 6*c2^2*c3*c4^2 + 6*c2^3*c3*c4^2 + c2^4*c3*c4^2 - 
   c2^5*c3*c4^2 + 6*c2^2*c3^2*c4^2 - 8*c2^3*c3^2*c4^2 + 2*c2^4*c3^2*c4^2 + 
   60*c2^4*g - 60*c2^5*g - 60*c2^4*c3*g + 60*c2^5*c3*g - 60*c2^4*c4*g + 
   60*c2^5*c4*g + 60*c2^4*c3*c4*g - 60*c2^5*c3*c4*g - 480*c2^3*g^2 + 
   480*c2^4*g^2 + 480*c2^3*c3*g^2 - 480*c2^4*c3*g^2 + 480*c2^3*c4*g^2 - 
   480*c2^4*c4*g^2 - 480*c2^3*c3*c4*g^2 + 480*c2^4*c3*c4*g^2 + 
   1440*c2^2*g^3 - 1440*c2^3*g^3 - 1440*c2^2*c3*g^3 + 1440*c2^3*c3*g^3 - 
   1440*c2^2*c4*g^3 + 1440*c2^3*c4*g^3 + 1440*c2^2*c3*c4*g^3 - 
   1440*c2^3*c3*c4*g^3 - 1440*c2*g^4 + 1440*c2^2*g^4 + 1440*c2*c3*g^4 - 
   1440*c2^2*c3*g^4 + 1440*c2*c4*g^4 - 1440*c2^2*c4*g^4 - 1440*c2*c3*c4*g^4 + 
   1440*c2^2*c3*c4*g^4 + 288*g^5 - 288*c2*g^5 - 288*c3*g^5 + 288*c2*c3*g^5 - 
   288*c4*g^5 + 288*c2*c4*g^5 + 288*c3*c4*g^5 - 288*c2*c3*c4*g^5 + 
   24*c2^4*tau41 - 48*c2^3*c3*tau41 - 48*c2^3*c4*tau41 + 
   144*c2^2*c3*c4*tau41 - 12*x - 48*c2*x + 60*c2^2*x - 4*c2^4*x + 
   60*c2*c3*x - 60*c2^2*c3*x + 8*c2^3*c3*x + 12*c3^2*x - 12*c2*c3^2*x + 
   60*c2*c4*x - 60*c2^2*c4*x + 8*c2^3*c4*x + 12*c3*c4*x - 72*c2*c3*c4*x + 
   36*c2^2*c3*c4*x - 12*c3^2*c4*x + 12*c2*c3^2*c4*x + 12*c4^2*x - 
   12*c2*c4^2*x - 12*c3*c4^2*x + 12*c2*c3*c4^2*x + 240*g*x - 240*c2*g*x - 
   240*c3*g*x + 240*c2*c3*g*x - 240*c4*g*x + 240*c2*c4*g*x + 240*c3*c4*g*x - 
   240*c2*c3*c4*g*x - 288*tau41*x + 48*x^2)/(12*(c1 - c2)*(c1 - c3)*(c1 - c4)*
  (1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - 
   c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 a22 = (4*c1*c2^3 - 4*c1^2*c2^3 - 3*c2^4 + 3*c1^2*c2^4 - 6*c1*c2^2*c3 + 
  6*c1^2*c2^2*c3 + 4*c2^3*c3 - 4*c1*c2^3*c3 + 3*c1*c2^4*c3 - 3*c1^2*c2^4*c3 + 
  6*c1*c2^2*c3^2 - 6*c1^2*c2^2*c3^2 - 4*c2^3*c3^2 + 4*c1^2*c2^3*c3^2 + 
  3*c2^4*c3^2 - 3*c1*c2^4*c3^2 - 6*c1*c2^2*c4 + 6*c1^2*c2^2*c4 + 4*c2^3*c4 - 
  4*c1*c2^3*c4 + 3*c1*c2^4*c4 - 3*c1^2*c2^4*c4 + 12*c1*c2*c3*c4 - 
  12*c1^2*c2*c3*c4 - 6*c2^2*c3*c4 + 12*c1*c2^2*c3*c4 - 6*c1^2*c2^2*c3*c4 - 
  4*c2^3*c3*c4 + 4*c1^2*c2^3*c3*c4 + 3*c2^4*c3*c4 - 6*c1*c2^4*c3*c4 + 
  3*c1^2*c2^4*c3*c4 - 12*c1*c2*c3^2*c4 + 12*c1^2*c2*c3^2*c4 + 
  6*c2^2*c3^2*c4 - 6*c1*c2^2*c3^2*c4 + 4*c1*c2^3*c3^2*c4 - 
  4*c1^2*c2^3*c3^2*c4 - 3*c2^4*c3^2*c4 + 3*c1*c2^4*c3^2*c4 + 6*c1*c2^2*c4^2 - 
  6*c1^2*c2^2*c4^2 - 4*c2^3*c4^2 + 4*c1^2*c2^3*c4^2 + 3*c2^4*c4^2 - 
  3*c1*c2^4*c4^2 - 12*c1*c2*c3*c4^2 + 12*c1^2*c2*c3*c4^2 + 6*c2^2*c3*c4^2 - 
  6*c1*c2^2*c3*c4^2 + 4*c1*c2^3*c3*c4^2 - 4*c1^2*c2^3*c3*c4^2 - 
  3*c2^4*c3*c4^2 + 3*c1*c2^4*c3*c4^2 + 12*c1*c2*c3^2*c4^2 - 
  12*c1^2*c2*c3^2*c4^2 - 6*c2^2*c3^2*c4^2 + 6*c1^2*c2^2*c3^2*c4^2 + 
  4*c2^3*c3^2*c4^2 - 4*c1*c2^3*c3^2*c4^2 + 60*c2^4*g - 60*c1*c2^4*g - 
  60*c2^4*c3*g + 60*c1*c2^4*c3*g - 60*c2^4*c4*g + 60*c1*c2^4*c4*g + 
  60*c2^4*c3*c4*g - 60*c1*c2^4*c3*c4*g - 480*c2^3*g^2 + 480*c1*c2^3*g^2 + 
  480*c2^3*c3*g^2 - 480*c1*c2^3*c3*g^2 + 480*c2^3*c4*g^2 - 
  480*c1*c2^3*c4*g^2 - 480*c2^3*c3*c4*g^2 + 480*c1*c2^3*c3*c4*g^2 + 
  1440*c2^2*g^3 - 1440*c1*c2^2*g^3 - 1440*c2^2*c3*g^3 + 1440*c1*c2^2*c3*g^3 - 
  1440*c2^2*c4*g^3 + 1440*c1*c2^2*c4*g^3 + 1440*c2^2*c3*c4*g^3 - 
  1440*c1*c2^2*c3*c4*g^3 - 1440*c2*g^4 + 1440*c1*c2*g^4 + 1440*c2*c3*g^4 - 
  1440*c1*c2*c3*g^4 + 1440*c2*c4*g^4 - 1440*c1*c2*c4*g^4 - 
  1440*c2*c3*c4*g^4 + 1440*c1*c2*c3*c4*g^4 + 288*g^5 - 288*c1*g^5 - 
  288*c3*g^5 + 288*c1*c3*g^5 - 288*c4*g^5 + 288*c1*c4*g^5 + 288*c3*c4*g^5 - 
  288*c1*c3*c4*g^5 + 96*c1*c2^3*tau41 - 72*c2^4*tau41 - 
  144*c1*c2^2*c3*tau41 + 96*c2^3*c3*tau41 - 144*c1*c2^2*c4*tau41 + 
  96*c2^3*c4*tau41 + 288*c1*c2*c3*c4*tau41 - 144*c2^2*c3*c4*tau41 - 12*x + 
  12*c1^2*x - 48*c2*x + 48*c1*c2*x - 16*c1*c2^3*x + 12*c2^4*x + 12*c1*c3*x - 
  12*c1^2*c3*x + 48*c2*c3*x - 48*c1*c2*c3*x + 24*c1*c2^2*c3*x - 
  16*c2^3*c3*x + 12*c3^2*x - 12*c1*c3^2*x + 12*c1*c4*x - 12*c1^2*c4*x + 
  48*c2*c4*x - 48*c1*c2*c4*x + 24*c1*c2^2*c4*x - 16*c2^3*c4*x + 12*c3*c4*x - 
  24*c1*c3*c4*x + 12*c1^2*c3*c4*x - 48*c2*c3*c4*x + 24*c2^2*c3*c4*x - 
  12*c3^2*c4*x + 12*c1*c3^2*c4*x + 12*c4^2*x - 12*c1*c4^2*x - 12*c3*c4^2*x + 
  12*c1*c3*c4^2*x + 240*g*x - 240*c1*g*x - 240*c3*g*x + 240*c1*c3*g*x - 
  240*c4*g*x + 240*c1*c4*g*x + 240*c3*c4*g*x - 240*c1*c3*c4*g*x - 
  288*tau41*x + 48*x^2)/(12*(c1 - c2)*(c2 - c3)*(c2 - c4)*
  (1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - 
   c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 a23 = -(2*c1*c2^3 - 2*c1^2*c2^3 - c2^4 - 2*c1*c2^4 + 3*c1^2*c2^4 + 
   4*c2^5 - 3*c1*c2^5 - c1^2*c2^5 - 3*c2^6 + 3*c1*c2^6 - 6*c1*c2^2*c4 + 
   6*c1^2*c2^2*c4 + 2*c2^3*c4 + 4*c1*c2^3*c4 - 6*c1^2*c2^3*c4 - 2*c2^4*c4 + 
   3*c1*c2^4*c4 - c1^2*c2^4*c4 - 3*c2^5*c4 + 2*c1*c2^5*c4 + c1^2*c2^5*c4 + 
   3*c2^6*c4 - 3*c1*c2^6*c4 + 6*c1*c2^2*c4^2 - 6*c1^2*c2^2*c4^2 - 
   2*c2^3*c4^2 - 6*c1*c2^3*c4^2 + 8*c1^2*c2^3*c4^2 + 3*c2^4*c4^2 - 
   c1*c2^4*c4^2 - 2*c1^2*c2^4*c4^2 - c2^5*c4^2 + c1*c2^5*c4^2 - 60*c2^4*g + 
   60*c1*c2^4*g + 60*c2^5*g - 60*c1*c2^5*g + 60*c2^4*c4*g - 60*c1*c2^4*c4*g - 
   60*c2^5*c4*g + 60*c1*c2^5*c4*g + 480*c2^3*g^2 - 480*c1*c2^3*g^2 - 
   480*c2^4*g^2 + 480*c1*c2^4*g^2 - 480*c2^3*c4*g^2 + 480*c1*c2^3*c4*g^2 + 
   480*c2^4*c4*g^2 - 480*c1*c2^4*c4*g^2 - 1440*c2^2*g^3 + 1440*c1*c2^2*g^3 + 
   1440*c2^3*g^3 - 1440*c1*c2^3*g^3 + 1440*c2^2*c4*g^3 - 
   1440*c1*c2^2*c4*g^3 - 1440*c2^3*c4*g^3 + 1440*c1*c2^3*c4*g^3 + 
   1440*c2*g^4 - 1440*c1*c2*g^4 - 1440*c2^2*g^4 + 1440*c1*c2^2*g^4 - 
   1440*c2*c4*g^4 + 1440*c1*c2*c4*g^4 + 1440*c2^2*c4*g^4 - 
   1440*c1*c2^2*c4*g^4 - 288*g^5 + 288*c1*g^5 + 288*c2*g^5 - 288*c1*c2*g^5 + 
   288*c4*g^5 - 288*c1*c4*g^5 - 288*c2*c4*g^5 + 288*c1*c2*c4*g^5 + 
   48*c1*c2^3*tau41 - 24*c2^4*tau41 - 144*c1*c2^2*c4*tau41 + 
   48*c2^3*c4*tau41 + 12*x - 12*c1^2*x + 48*c2*x - 60*c1*c2*x + 
   12*c1^2*c2*x - 60*c2^2*x + 60*c1*c2^2*x - 8*c1*c2^3*x + 4*c2^4*x - 
   12*c1*c4*x + 12*c1^2*c4*x - 60*c2*c4*x + 72*c1*c2*c4*x - 12*c1^2*c2*c4*x + 
   60*c2^2*c4*x - 36*c1*c2^2*c4*x - 8*c2^3*c4*x - 12*c4^2*x + 12*c1*c4^2*x + 
   12*c2*c4^2*x - 12*c1*c2*c4^2*x - 240*g*x + 240*c1*g*x + 240*c2*g*x - 
   240*c1*c2*g*x + 240*c4*g*x - 240*c1*c4*g*x - 240*c2*c4*g*x + 
   240*c1*c2*c4*g*x + 288*tau41*x - 48*x^2)/(12*(c1 - c3)*(-c2 + c3)*
  (c3 - c4)*(1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + 
   c1*c4 + c2*c4 - c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 
   24*tau41 - 4*x));
 a24 = -(2*c1*c2^3 - 2*c1^2*c2^3 - c2^4 - 2*c1*c2^4 + 3*c1^2*c2^4 + 
   4*c2^5 - 3*c1*c2^5 - c1^2*c2^5 - 3*c2^6 + 3*c1*c2^6 - 6*c1*c2^2*c3 + 
   6*c1^2*c2^2*c3 + 2*c2^3*c3 + 4*c1*c2^3*c3 - 6*c1^2*c2^3*c3 - 2*c2^4*c3 + 
   3*c1*c2^4*c3 - c1^2*c2^4*c3 - 3*c2^5*c3 + 2*c1*c2^5*c3 + c1^2*c2^5*c3 + 
   3*c2^6*c3 - 3*c1*c2^6*c3 + 6*c1*c2^2*c3^2 - 6*c1^2*c2^2*c3^2 - 
   2*c2^3*c3^2 - 6*c1*c2^3*c3^2 + 8*c1^2*c2^3*c3^2 + 3*c2^4*c3^2 - 
   c1*c2^4*c3^2 - 2*c1^2*c2^4*c3^2 - c2^5*c3^2 + c1*c2^5*c3^2 - 60*c2^4*g + 
   60*c1*c2^4*g + 60*c2^5*g - 60*c1*c2^5*g + 60*c2^4*c3*g - 60*c1*c2^4*c3*g - 
   60*c2^5*c3*g + 60*c1*c2^5*c3*g + 480*c2^3*g^2 - 480*c1*c2^3*g^2 - 
   480*c2^4*g^2 + 480*c1*c2^4*g^2 - 480*c2^3*c3*g^2 + 480*c1*c2^3*c3*g^2 + 
   480*c2^4*c3*g^2 - 480*c1*c2^4*c3*g^2 - 1440*c2^2*g^3 + 1440*c1*c2^2*g^3 + 
   1440*c2^3*g^3 - 1440*c1*c2^3*g^3 + 1440*c2^2*c3*g^3 - 
   1440*c1*c2^2*c3*g^3 - 1440*c2^3*c3*g^3 + 1440*c1*c2^3*c3*g^3 + 
   1440*c2*g^4 - 1440*c1*c2*g^4 - 1440*c2^2*g^4 + 1440*c1*c2^2*g^4 - 
   1440*c2*c3*g^4 + 1440*c1*c2*c3*g^4 + 1440*c2^2*c3*g^4 - 
   1440*c1*c2^2*c3*g^4 - 288*g^5 + 288*c1*g^5 + 288*c2*g^5 - 288*c1*c2*g^5 + 
   288*c3*g^5 - 288*c1*c3*g^5 - 288*c2*c3*g^5 + 288*c1*c2*c3*g^5 + 
   48*c1*c2^3*tau41 - 24*c2^4*tau41 - 144*c1*c2^2*c3*tau41 + 
   48*c2^3*c3*tau41 + 12*x - 12*c1^2*x + 48*c2*x - 60*c1*c2*x + 
   12*c1^2*c2*x - 60*c2^2*x + 60*c1*c2^2*x - 8*c1*c2^3*x + 4*c2^4*x - 
   12*c1*c3*x + 12*c1^2*c3*x - 60*c2*c3*x + 72*c1*c2*c3*x - 12*c1^2*c2*c3*x + 
   60*c2^2*c3*x - 36*c1*c2^2*c3*x - 8*c2^3*c3*x - 12*c3^2*x + 12*c1*c3^2*x + 
   12*c2*c3^2*x - 12*c1*c2*c3^2*x - 240*g*x + 240*c1*g*x + 240*c2*g*x - 
   240*c1*c2*g*x + 240*c3*g*x - 240*c1*c3*g*x - 240*c2*c3*g*x + 
   240*c1*c2*c3*g*x + 288*tau41*x - 48*x^2)/(12*(c1 - c4)*(-c2 + c4)*
  (-c3 + c4)*(1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + 
   c1*c4 + c2*c4 - c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 
   24*tau41 - 4*x));
 a25 = (c1*c2^4 - 3*c2^5 - 2*c1*c2^3*c3 + c2^4*c3 - 2*c1*c2^3*c4 + 
  c2^4*c4 + 6*c1*c2^2*c3*c4 - 2*c2^3*c3*c4 + 60*c2^4*g - 480*c2^3*g^2 + 
  1440*c2^2*g^3 - 1440*c2*g^4 + 288*g^5 - 12*c1*x - 60*c2*x - 12*c3*x - 
  12*c4*x + 240*g*x)/(12*(1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - 
   c1*c2*c3 - c4 + c1*c4 + c2*c4 - c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + 
   c1*c2*c3*c4 + 24*tau41 - 4*x));
 a31 = (2*c2*c3^3 - 2*c2^2*c3^3 - c3^4 - 2*c2*c3^4 + 3*c2^2*c3^4 + 4*c3^5 - 
  3*c2*c3^5 - c2^2*c3^5 - 3*c3^6 + 3*c2*c3^6 - 6*c2*c3^2*c4 + 
  6*c2^2*c3^2*c4 + 2*c3^3*c4 + 4*c2*c3^3*c4 - 6*c2^2*c3^3*c4 - 2*c3^4*c4 + 
  3*c2*c3^4*c4 - c2^2*c3^4*c4 - 3*c3^5*c4 + 2*c2*c3^5*c4 + c2^2*c3^5*c4 + 
  3*c3^6*c4 - 3*c2*c3^6*c4 + 6*c2*c3^2*c4^2 - 6*c2^2*c3^2*c4^2 - 
  2*c3^3*c4^2 - 6*c2*c3^3*c4^2 + 8*c2^2*c3^3*c4^2 + 3*c3^4*c4^2 - 
  c2*c3^4*c4^2 - 2*c2^2*c3^4*c4^2 - c3^5*c4^2 + c2*c3^5*c4^2 - 60*c3^4*g + 
  60*c2*c3^4*g + 60*c3^5*g - 60*c2*c3^5*g + 60*c3^4*c4*g - 60*c2*c3^4*c4*g - 
  60*c3^5*c4*g + 60*c2*c3^5*c4*g + 480*c3^3*g^2 - 480*c2*c3^3*g^2 - 
  480*c3^4*g^2 + 480*c2*c3^4*g^2 - 480*c3^3*c4*g^2 + 480*c2*c3^3*c4*g^2 + 
  480*c3^4*c4*g^2 - 480*c2*c3^4*c4*g^2 - 1440*c3^2*g^3 + 1440*c2*c3^2*g^3 + 
  1440*c3^3*g^3 - 1440*c2*c3^3*g^3 + 1440*c3^2*c4*g^3 - 1440*c2*c3^2*c4*g^3 - 
  1440*c3^3*c4*g^3 + 1440*c2*c3^3*c4*g^3 + 1440*c3*g^4 - 1440*c2*c3*g^4 - 
  1440*c3^2*g^4 + 1440*c2*c3^2*g^4 - 1440*c3*c4*g^4 + 1440*c2*c3*c4*g^4 + 
  1440*c3^2*c4*g^4 - 1440*c2*c3^2*c4*g^4 - 288*g^5 + 288*c2*g^5 + 
  288*c3*g^5 - 288*c2*c3*g^5 + 288*c4*g^5 - 288*c2*c4*g^5 - 288*c3*c4*g^5 + 
  288*c2*c3*c4*g^5 + 48*c2*c3^3*tau41 - 24*c3^4*tau41 - 
  144*c2*c3^2*c4*tau41 + 48*c3^3*c4*tau41 + 12*x - 12*c2^2*x + 48*c3*x - 
  60*c2*c3*x + 12*c2^2*c3*x - 60*c3^2*x + 60*c2*c3^2*x - 8*c2*c3^3*x + 
  4*c3^4*x - 12*c2*c4*x + 12*c2^2*c4*x - 60*c3*c4*x + 72*c2*c3*c4*x - 
  12*c2^2*c3*c4*x + 60*c3^2*c4*x - 36*c2*c3^2*c4*x - 8*c3^3*c4*x - 
  12*c4^2*x + 12*c2*c4^2*x + 12*c3*c4^2*x - 12*c2*c3*c4^2*x - 240*g*x + 
  240*c2*g*x + 240*c3*g*x - 240*c2*c3*g*x + 240*c4*g*x - 240*c2*c4*g*x - 
  240*c3*c4*g*x + 240*c2*c3*c4*g*x + 288*tau41*x - 48*x^2)/
 (12*(c1 - c2)*(c1 - c3)*(c1 - c4)*(1 - c1 - c2 + c1*c2 - c3 + c1*c3 + 
   c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - c1*c2*c4 + c3*c4 - c1*c3*c4 - 
   c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 a32 = -(2*c1*c3^3 - 2*c1^2*c3^3 - c3^4 - 2*c1*c3^4 + 3*c1^2*c3^4 + 
   4*c3^5 - 3*c1*c3^5 - c1^2*c3^5 - 3*c3^6 + 3*c1*c3^6 - 6*c1*c3^2*c4 + 
   6*c1^2*c3^2*c4 + 2*c3^3*c4 + 4*c1*c3^3*c4 - 6*c1^2*c3^3*c4 - 2*c3^4*c4 + 
   3*c1*c3^4*c4 - c1^2*c3^4*c4 - 3*c3^5*c4 + 2*c1*c3^5*c4 + c1^2*c3^5*c4 + 
   3*c3^6*c4 - 3*c1*c3^6*c4 + 6*c1*c3^2*c4^2 - 6*c1^2*c3^2*c4^2 - 
   2*c3^3*c4^2 - 6*c1*c3^3*c4^2 + 8*c1^2*c3^3*c4^2 + 3*c3^4*c4^2 - 
   c1*c3^4*c4^2 - 2*c1^2*c3^4*c4^2 - c3^5*c4^2 + c1*c3^5*c4^2 - 60*c3^4*g + 
   60*c1*c3^4*g + 60*c3^5*g - 60*c1*c3^5*g + 60*c3^4*c4*g - 60*c1*c3^4*c4*g - 
   60*c3^5*c4*g + 60*c1*c3^5*c4*g + 480*c3^3*g^2 - 480*c1*c3^3*g^2 - 
   480*c3^4*g^2 + 480*c1*c3^4*g^2 - 480*c3^3*c4*g^2 + 480*c1*c3^3*c4*g^2 + 
   480*c3^4*c4*g^2 - 480*c1*c3^4*c4*g^2 - 1440*c3^2*g^3 + 1440*c1*c3^2*g^3 + 
   1440*c3^3*g^3 - 1440*c1*c3^3*g^3 + 1440*c3^2*c4*g^3 - 
   1440*c1*c3^2*c4*g^3 - 1440*c3^3*c4*g^3 + 1440*c1*c3^3*c4*g^3 + 
   1440*c3*g^4 - 1440*c1*c3*g^4 - 1440*c3^2*g^4 + 1440*c1*c3^2*g^4 - 
   1440*c3*c4*g^4 + 1440*c1*c3*c4*g^4 + 1440*c3^2*c4*g^4 - 
   1440*c1*c3^2*c4*g^4 - 288*g^5 + 288*c1*g^5 + 288*c3*g^5 - 288*c1*c3*g^5 + 
   288*c4*g^5 - 288*c1*c4*g^5 - 288*c3*c4*g^5 + 288*c1*c3*c4*g^5 + 
   48*c1*c3^3*tau41 - 24*c3^4*tau41 - 144*c1*c3^2*c4*tau41 + 
   48*c3^3*c4*tau41 + 12*x - 12*c1^2*x + 48*c3*x - 60*c1*c3*x + 
   12*c1^2*c3*x - 60*c3^2*x + 60*c1*c3^2*x - 8*c1*c3^3*x + 4*c3^4*x - 
   12*c1*c4*x + 12*c1^2*c4*x - 60*c3*c4*x + 72*c1*c3*c4*x - 12*c1^2*c3*c4*x + 
   60*c3^2*c4*x - 36*c1*c3^2*c4*x - 8*c3^3*c4*x - 12*c4^2*x + 12*c1*c4^2*x + 
   12*c3*c4^2*x - 12*c1*c3*c4^2*x - 240*g*x + 240*c1*g*x + 240*c3*g*x - 
   240*c1*c3*g*x + 240*c4*g*x - 240*c1*c4*g*x - 240*c3*c4*g*x + 
   240*c1*c3*c4*g*x + 288*tau41*x - 48*x^2)/(12*(c1 - c2)*(c2 - c3)*(c2 - c4)*
  (1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - 
   c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 a33 = (-6*c1*c2*c3^2 + 6*c1^2*c2*c3^2 + 6*c1*c2^2*c3^2 - 
  6*c1^2*c2^2*c3^2 + 4*c1*c3^3 - 4*c1^2*c3^3 + 4*c2*c3^3 - 4*c1*c2*c3^3 - 
  4*c2^2*c3^3 + 4*c1^2*c2^2*c3^3 - 3*c3^4 + 3*c1^2*c3^4 + 3*c1*c2*c3^4 - 
  3*c1^2*c2*c3^4 + 3*c2^2*c3^4 - 3*c1*c2^2*c3^4 + 12*c1*c2*c3*c4 - 
  12*c1^2*c2*c3*c4 - 12*c1*c2^2*c3*c4 + 12*c1^2*c2^2*c3*c4 - 6*c1*c3^2*c4 + 
  6*c1^2*c3^2*c4 - 6*c2*c3^2*c4 + 12*c1*c2*c3^2*c4 - 6*c1^2*c2*c3^2*c4 + 
  6*c2^2*c3^2*c4 - 6*c1*c2^2*c3^2*c4 + 4*c3^3*c4 - 4*c1*c3^3*c4 - 
  4*c2*c3^3*c4 + 4*c1^2*c2*c3^3*c4 + 4*c1*c2^2*c3^3*c4 - 
  4*c1^2*c2^2*c3^3*c4 + 3*c1*c3^4*c4 - 3*c1^2*c3^4*c4 + 3*c2*c3^4*c4 - 
  6*c1*c2*c3^4*c4 + 3*c1^2*c2*c3^4*c4 - 3*c2^2*c3^4*c4 + 3*c1*c2^2*c3^4*c4 - 
  12*c1*c2*c3*c4^2 + 12*c1^2*c2*c3*c4^2 + 12*c1*c2^2*c3*c4^2 - 
  12*c1^2*c2^2*c3*c4^2 + 6*c1*c3^2*c4^2 - 6*c1^2*c3^2*c4^2 + 6*c2*c3^2*c4^2 - 
  6*c1*c2*c3^2*c4^2 - 6*c2^2*c3^2*c4^2 + 6*c1^2*c2^2*c3^2*c4^2 - 
  4*c3^3*c4^2 + 4*c1^2*c3^3*c4^2 + 4*c1*c2*c3^3*c4^2 - 4*c1^2*c2*c3^3*c4^2 + 
  4*c2^2*c3^3*c4^2 - 4*c1*c2^2*c3^3*c4^2 + 3*c3^4*c4^2 - 3*c1*c3^4*c4^2 - 
  3*c2*c3^4*c4^2 + 3*c1*c2*c3^4*c4^2 + 60*c3^4*g - 60*c1*c3^4*g - 
  60*c2*c3^4*g + 60*c1*c2*c3^4*g - 60*c3^4*c4*g + 60*c1*c3^4*c4*g + 
  60*c2*c3^4*c4*g - 60*c1*c2*c3^4*c4*g - 480*c3^3*g^2 + 480*c1*c3^3*g^2 + 
  480*c2*c3^3*g^2 - 480*c1*c2*c3^3*g^2 + 480*c3^3*c4*g^2 - 
  480*c1*c3^3*c4*g^2 - 480*c2*c3^3*c4*g^2 + 480*c1*c2*c3^3*c4*g^2 + 
  1440*c3^2*g^3 - 1440*c1*c3^2*g^3 - 1440*c2*c3^2*g^3 + 1440*c1*c2*c3^2*g^3 - 
  1440*c3^2*c4*g^3 + 1440*c1*c3^2*c4*g^3 + 1440*c2*c3^2*c4*g^3 - 
  1440*c1*c2*c3^2*c4*g^3 - 1440*c3*g^4 + 1440*c1*c3*g^4 + 1440*c2*c3*g^4 - 
  1440*c1*c2*c3*g^4 + 1440*c3*c4*g^4 - 1440*c1*c3*c4*g^4 - 
  1440*c2*c3*c4*g^4 + 1440*c1*c2*c3*c4*g^4 + 288*g^5 - 288*c1*g^5 - 
  288*c2*g^5 + 288*c1*c2*g^5 - 288*c4*g^5 + 288*c1*c4*g^5 + 288*c2*c4*g^5 - 
  288*c1*c2*c4*g^5 - 144*c1*c2*c3^2*tau41 + 96*c1*c3^3*tau41 + 
  96*c2*c3^3*tau41 - 72*c3^4*tau41 + 288*c1*c2*c3*c4*tau41 - 
  144*c1*c3^2*c4*tau41 - 144*c2*c3^2*c4*tau41 + 96*c3^3*c4*tau41 - 12*x + 
  12*c1^2*x + 12*c1*c2*x - 12*c1^2*c2*x + 12*c2^2*x - 12*c1*c2^2*x - 
  48*c3*x + 48*c1*c3*x + 48*c2*c3*x - 48*c1*c2*c3*x + 24*c1*c2*c3^2*x - 
  16*c1*c3^3*x - 16*c2*c3^3*x + 12*c3^4*x + 12*c1*c4*x - 12*c1^2*c4*x + 
  12*c2*c4*x - 24*c1*c2*c4*x + 12*c1^2*c2*c4*x - 12*c2^2*c4*x + 
  12*c1*c2^2*c4*x + 48*c3*c4*x - 48*c1*c3*c4*x - 48*c2*c3*c4*x + 
  24*c1*c3^2*c4*x + 24*c2*c3^2*c4*x - 16*c3^3*c4*x + 12*c4^2*x - 
  12*c1*c4^2*x - 12*c2*c4^2*x + 12*c1*c2*c4^2*x + 240*g*x - 240*c1*g*x - 
  240*c2*g*x + 240*c1*c2*g*x - 240*c4*g*x + 240*c1*c4*g*x + 240*c2*c4*g*x - 
  240*c1*c2*c4*g*x - 288*tau41*x + 48*x^2)/(12*(c1 - c3)*(-c2 + c3)*(c3 - c4)*
  (1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - 
   c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 a34 = (6*c1*c2*c3^2 - 6*c1^2*c2*c3^2 - 6*c1*c2^2*c3^2 + 6*c1^2*c2^2*c3^2 - 
  2*c1*c3^3 + 2*c1^2*c3^3 - 2*c2*c3^3 - 4*c1*c2*c3^3 + 6*c1^2*c2*c3^3 + 
  2*c2^2*c3^3 + 6*c1*c2^2*c3^3 - 8*c1^2*c2^2*c3^3 + c3^4 + 2*c1*c3^4 - 
  3*c1^2*c3^4 + 2*c2*c3^4 - 3*c1*c2*c3^4 + c1^2*c2*c3^4 - 3*c2^2*c3^4 + 
  c1*c2^2*c3^4 + 2*c1^2*c2^2*c3^4 - 4*c3^5 + 3*c1*c3^5 + c1^2*c3^5 + 
  3*c2*c3^5 - 2*c1*c2*c3^5 - c1^2*c2*c3^5 + c2^2*c3^5 - c1*c2^2*c3^5 + 
  3*c3^6 - 3*c1*c3^6 - 3*c2*c3^6 + 3*c1*c2*c3^6 + 60*c3^4*g - 60*c1*c3^4*g - 
  60*c2*c3^4*g + 60*c1*c2*c3^4*g - 60*c3^5*g + 60*c1*c3^5*g + 60*c2*c3^5*g - 
  60*c1*c2*c3^5*g - 480*c3^3*g^2 + 480*c1*c3^3*g^2 + 480*c2*c3^3*g^2 - 
  480*c1*c2*c3^3*g^2 + 480*c3^4*g^2 - 480*c1*c3^4*g^2 - 480*c2*c3^4*g^2 + 
  480*c1*c2*c3^4*g^2 + 1440*c3^2*g^3 - 1440*c1*c3^2*g^3 - 1440*c2*c3^2*g^3 + 
  1440*c1*c2*c3^2*g^3 - 1440*c3^3*g^3 + 1440*c1*c3^3*g^3 + 1440*c2*c3^3*g^3 - 
  1440*c1*c2*c3^3*g^3 - 1440*c3*g^4 + 1440*c1*c3*g^4 + 1440*c2*c3*g^4 - 
  1440*c1*c2*c3*g^4 + 1440*c3^2*g^4 - 1440*c1*c3^2*g^4 - 1440*c2*c3^2*g^4 + 
  1440*c1*c2*c3^2*g^4 + 288*g^5 - 288*c1*g^5 - 288*c2*g^5 + 288*c1*c2*g^5 - 
  288*c3*g^5 + 288*c1*c3*g^5 + 288*c2*c3*g^5 - 288*c1*c2*c3*g^5 + 
  144*c1*c2*c3^2*tau41 - 48*c1*c3^3*tau41 - 48*c2*c3^3*tau41 + 
  24*c3^4*tau41 - 12*x + 12*c1^2*x + 12*c1*c2*x - 12*c1^2*c2*x + 12*c2^2*x - 
  12*c1*c2^2*x - 48*c3*x + 60*c1*c3*x - 12*c1^2*c3*x + 60*c2*c3*x - 
  72*c1*c2*c3*x + 12*c1^2*c2*c3*x - 12*c2^2*c3*x + 12*c1*c2^2*c3*x + 
  60*c3^2*x - 60*c1*c3^2*x - 60*c2*c3^2*x + 36*c1*c2*c3^2*x + 8*c1*c3^3*x + 
  8*c2*c3^3*x - 4*c3^4*x + 240*g*x - 240*c1*g*x - 240*c2*g*x + 
  240*c1*c2*g*x - 240*c3*g*x + 240*c1*c3*g*x + 240*c2*c3*g*x - 
  240*c1*c2*c3*g*x - 288*tau41*x + 48*x^2)/(12*(c1 - c4)*(-c2 + c4)*
  (-c3 + c4)*(1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + 
   c1*c4 + c2*c4 - c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 
   24*tau41 - 4*x));
 a35 = -(2*c1*c2*c3^3 - c1*c3^4 - c2*c3^4 + 3*c3^5 - 6*c1*c2*c3^2*c4 + 
   2*c1*c3^3*c4 + 2*c2*c3^3*c4 - c3^4*c4 - 60*c3^4*g + 480*c3^3*g^2 - 
   1440*c3^2*g^3 + 1440*c3*g^4 - 288*g^5 + 12*c1*x + 12*c2*x + 60*c3*x + 
   12*c4*x - 240*g*x)/(12*(1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - 
   c1*c2*c3 - c4 + c1*c4 + c2*c4 - c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + 
   c1*c2*c3*c4 + 24*tau41 - 4*x));
 a41 = -(6*c2*c3*c4^2 - 6*c2^2*c3*c4^2 - 6*c2*c3^2*c4^2 + 
   6*c2^2*c3^2*c4^2 - 2*c2*c4^3 + 2*c2^2*c4^3 - 2*c3*c4^3 - 4*c2*c3*c4^3 + 
   6*c2^2*c3*c4^3 + 2*c3^2*c4^3 + 6*c2*c3^2*c4^3 - 8*c2^2*c3^2*c4^3 + c4^4 + 
   2*c2*c4^4 - 3*c2^2*c4^4 + 2*c3*c4^4 - 3*c2*c3*c4^4 + c2^2*c3*c4^4 - 
   3*c3^2*c4^4 + c2*c3^2*c4^4 + 2*c2^2*c3^2*c4^4 - 4*c4^5 + 3*c2*c4^5 + 
   c2^2*c4^5 + 3*c3*c4^5 - 2*c2*c3*c4^5 - c2^2*c3*c4^5 + c3^2*c4^5 - 
   c2*c3^2*c4^5 + 3*c4^6 - 3*c2*c4^6 - 3*c3*c4^6 + 3*c2*c3*c4^6 + 60*c4^4*g - 
   60*c2*c4^4*g - 60*c3*c4^4*g + 60*c2*c3*c4^4*g - 60*c4^5*g + 60*c2*c4^5*g + 
   60*c3*c4^5*g - 60*c2*c3*c4^5*g - 480*c4^3*g^2 + 480*c2*c4^3*g^2 + 
   480*c3*c4^3*g^2 - 480*c2*c3*c4^3*g^2 + 480*c4^4*g^2 - 480*c2*c4^4*g^2 - 
   480*c3*c4^4*g^2 + 480*c2*c3*c4^4*g^2 + 1440*c4^2*g^3 - 1440*c2*c4^2*g^3 - 
   1440*c3*c4^2*g^3 + 1440*c2*c3*c4^2*g^3 - 1440*c4^3*g^3 + 
   1440*c2*c4^3*g^3 + 1440*c3*c4^3*g^3 - 1440*c2*c3*c4^3*g^3 - 1440*c4*g^4 + 
   1440*c2*c4*g^4 + 1440*c3*c4*g^4 - 1440*c2*c3*c4*g^4 + 1440*c4^2*g^4 - 
   1440*c2*c4^2*g^4 - 1440*c3*c4^2*g^4 + 1440*c2*c3*c4^2*g^4 + 288*g^5 - 
   288*c2*g^5 - 288*c3*g^5 + 288*c2*c3*g^5 - 288*c4*g^5 + 288*c2*c4*g^5 + 
   288*c3*c4*g^5 - 288*c2*c3*c4*g^5 + 144*c2*c3*c4^2*tau41 - 
   48*c2*c4^3*tau41 - 48*c3*c4^3*tau41 + 24*c4^4*tau41 - 12*x + 12*c2^2*x + 
   12*c2*c3*x - 12*c2^2*c3*x + 12*c3^2*x - 12*c2*c3^2*x - 48*c4*x + 
   60*c2*c4*x - 12*c2^2*c4*x + 60*c3*c4*x - 72*c2*c3*c4*x + 12*c2^2*c3*c4*x - 
   12*c3^2*c4*x + 12*c2*c3^2*c4*x + 60*c4^2*x - 60*c2*c4^2*x - 60*c3*c4^2*x + 
   36*c2*c3*c4^2*x + 8*c2*c4^3*x + 8*c3*c4^3*x - 4*c4^4*x + 240*g*x - 
   240*c2*g*x - 240*c3*g*x + 240*c2*c3*g*x - 240*c4*g*x + 240*c2*c4*g*x + 
   240*c3*c4*g*x - 240*c2*c3*c4*g*x - 288*tau41*x + 48*x^2)/
 (12*(c1 - c2)*(c1 - c3)*(c1 - c4)*(1 - c1 - c2 + c1*c2 - c3 + c1*c3 + 
   c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - c1*c2*c4 + c3*c4 - c1*c3*c4 - 
   c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 a42 = (6*c1*c3*c4^2 - 6*c1^2*c3*c4^2 - 6*c1*c3^2*c4^2 + 6*c1^2*c3^2*c4^2 - 
  2*c1*c4^3 + 2*c1^2*c4^3 - 2*c3*c4^3 - 4*c1*c3*c4^3 + 6*c1^2*c3*c4^3 + 
  2*c3^2*c4^3 + 6*c1*c3^2*c4^3 - 8*c1^2*c3^2*c4^3 + c4^4 + 2*c1*c4^4 - 
  3*c1^2*c4^4 + 2*c3*c4^4 - 3*c1*c3*c4^4 + c1^2*c3*c4^4 - 3*c3^2*c4^4 + 
  c1*c3^2*c4^4 + 2*c1^2*c3^2*c4^4 - 4*c4^5 + 3*c1*c4^5 + c1^2*c4^5 + 
  3*c3*c4^5 - 2*c1*c3*c4^5 - c1^2*c3*c4^5 + c3^2*c4^5 - c1*c3^2*c4^5 + 
  3*c4^6 - 3*c1*c4^6 - 3*c3*c4^6 + 3*c1*c3*c4^6 + 60*c4^4*g - 60*c1*c4^4*g - 
  60*c3*c4^4*g + 60*c1*c3*c4^4*g - 60*c4^5*g + 60*c1*c4^5*g + 60*c3*c4^5*g - 
  60*c1*c3*c4^5*g - 480*c4^3*g^2 + 480*c1*c4^3*g^2 + 480*c3*c4^3*g^2 - 
  480*c1*c3*c4^3*g^2 + 480*c4^4*g^2 - 480*c1*c4^4*g^2 - 480*c3*c4^4*g^2 + 
  480*c1*c3*c4^4*g^2 + 1440*c4^2*g^3 - 1440*c1*c4^2*g^3 - 1440*c3*c4^2*g^3 + 
  1440*c1*c3*c4^2*g^3 - 1440*c4^3*g^3 + 1440*c1*c4^3*g^3 + 1440*c3*c4^3*g^3 - 
  1440*c1*c3*c4^3*g^3 - 1440*c4*g^4 + 1440*c1*c4*g^4 + 1440*c3*c4*g^4 - 
  1440*c1*c3*c4*g^4 + 1440*c4^2*g^4 - 1440*c1*c4^2*g^4 - 1440*c3*c4^2*g^4 + 
  1440*c1*c3*c4^2*g^4 + 288*g^5 - 288*c1*g^5 - 288*c3*g^5 + 288*c1*c3*g^5 - 
  288*c4*g^5 + 288*c1*c4*g^5 + 288*c3*c4*g^5 - 288*c1*c3*c4*g^5 + 
  144*c1*c3*c4^2*tau41 - 48*c1*c4^3*tau41 - 48*c3*c4^3*tau41 + 
  24*c4^4*tau41 - 12*x + 12*c1^2*x + 12*c1*c3*x - 12*c1^2*c3*x + 12*c3^2*x - 
  12*c1*c3^2*x - 48*c4*x + 60*c1*c4*x - 12*c1^2*c4*x + 60*c3*c4*x - 
  72*c1*c3*c4*x + 12*c1^2*c3*c4*x - 12*c3^2*c4*x + 12*c1*c3^2*c4*x + 
  60*c4^2*x - 60*c1*c4^2*x - 60*c3*c4^2*x + 36*c1*c3*c4^2*x + 8*c1*c4^3*x + 
  8*c3*c4^3*x - 4*c4^4*x + 240*g*x - 240*c1*g*x - 240*c3*g*x + 
  240*c1*c3*g*x - 240*c4*g*x + 240*c1*c4*g*x + 240*c3*c4*g*x - 
  240*c1*c3*c4*g*x - 288*tau41*x + 48*x^2)/(12*(c1 - c2)*(c2 - c3)*(c2 - c4)*
  (1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - 
   c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 a43 = (6*c1*c2*c4^2 - 6*c1^2*c2*c4^2 - 6*c1*c2^2*c4^2 + 6*c1^2*c2^2*c4^2 - 
  2*c1*c4^3 + 2*c1^2*c4^3 - 2*c2*c4^3 - 4*c1*c2*c4^3 + 6*c1^2*c2*c4^3 + 
  2*c2^2*c4^3 + 6*c1*c2^2*c4^3 - 8*c1^2*c2^2*c4^3 + c4^4 + 2*c1*c4^4 - 
  3*c1^2*c4^4 + 2*c2*c4^4 - 3*c1*c2*c4^4 + c1^2*c2*c4^4 - 3*c2^2*c4^4 + 
  c1*c2^2*c4^4 + 2*c1^2*c2^2*c4^4 - 4*c4^5 + 3*c1*c4^5 + c1^2*c4^5 + 
  3*c2*c4^5 - 2*c1*c2*c4^5 - c1^2*c2*c4^5 + c2^2*c4^5 - c1*c2^2*c4^5 + 
  3*c4^6 - 3*c1*c4^6 - 3*c2*c4^6 + 3*c1*c2*c4^6 + 60*c4^4*g - 60*c1*c4^4*g - 
  60*c2*c4^4*g + 60*c1*c2*c4^4*g - 60*c4^5*g + 60*c1*c4^5*g + 60*c2*c4^5*g - 
  60*c1*c2*c4^5*g - 480*c4^3*g^2 + 480*c1*c4^3*g^2 + 480*c2*c4^3*g^2 - 
  480*c1*c2*c4^3*g^2 + 480*c4^4*g^2 - 480*c1*c4^4*g^2 - 480*c2*c4^4*g^2 + 
  480*c1*c2*c4^4*g^2 + 1440*c4^2*g^3 - 1440*c1*c4^2*g^3 - 1440*c2*c4^2*g^3 + 
  1440*c1*c2*c4^2*g^3 - 1440*c4^3*g^3 + 1440*c1*c4^3*g^3 + 1440*c2*c4^3*g^3 - 
  1440*c1*c2*c4^3*g^3 - 1440*c4*g^4 + 1440*c1*c4*g^4 + 1440*c2*c4*g^4 - 
  1440*c1*c2*c4*g^4 + 1440*c4^2*g^4 - 1440*c1*c4^2*g^4 - 1440*c2*c4^2*g^4 + 
  1440*c1*c2*c4^2*g^4 + 288*g^5 - 288*c1*g^5 - 288*c2*g^5 + 288*c1*c2*g^5 - 
  288*c4*g^5 + 288*c1*c4*g^5 + 288*c2*c4*g^5 - 288*c1*c2*c4*g^5 + 
  144*c1*c2*c4^2*tau41 - 48*c1*c4^3*tau41 - 48*c2*c4^3*tau41 + 
  24*c4^4*tau41 - 12*x + 12*c1^2*x + 12*c1*c2*x - 12*c1^2*c2*x + 12*c2^2*x - 
  12*c1*c2^2*x - 48*c4*x + 60*c1*c4*x - 12*c1^2*c4*x + 60*c2*c4*x - 
  72*c1*c2*c4*x + 12*c1^2*c2*c4*x - 12*c2^2*c4*x + 12*c1*c2^2*c4*x + 
  60*c4^2*x - 60*c1*c4^2*x - 60*c2*c4^2*x + 36*c1*c2*c4^2*x + 8*c1*c4^3*x + 
  8*c2*c4^3*x - 4*c4^4*x + 240*g*x - 240*c1*g*x - 240*c2*g*x + 
  240*c1*c2*g*x - 240*c4*g*x + 240*c1*c4*g*x + 240*c2*c4*g*x - 
  240*c1*c2*c4*g*x - 288*tau41*x + 48*x^2)/(12*(c1 - c3)*(-c2 + c3)*(c3 - c4)*
  (1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - 
   c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 a44 = (12*c1*c2*c3*c4 - 12*c1^2*c2*c3*c4 - 12*c1*c2^2*c3*c4 + 
  12*c1^2*c2^2*c3*c4 - 12*c1*c2*c3^2*c4 + 12*c1^2*c2*c3^2*c4 + 
  12*c1*c2^2*c3^2*c4 - 12*c1^2*c2^2*c3^2*c4 - 6*c1*c2*c4^2 + 6*c1^2*c2*c4^2 + 
  6*c1*c2^2*c4^2 - 6*c1^2*c2^2*c4^2 - 6*c1*c3*c4^2 + 6*c1^2*c3*c4^2 - 
  6*c2*c3*c4^2 + 12*c1*c2*c3*c4^2 - 6*c1^2*c2*c3*c4^2 + 6*c2^2*c3*c4^2 - 
  6*c1*c2^2*c3*c4^2 + 6*c1*c3^2*c4^2 - 6*c1^2*c3^2*c4^2 + 6*c2*c3^2*c4^2 - 
  6*c1*c2*c3^2*c4^2 - 6*c2^2*c3^2*c4^2 + 6*c1^2*c2^2*c3^2*c4^2 + 4*c1*c4^3 - 
  4*c1^2*c4^3 + 4*c2*c4^3 - 4*c1*c2*c4^3 - 4*c2^2*c4^3 + 4*c1^2*c2^2*c4^3 + 
  4*c3*c4^3 - 4*c1*c3*c4^3 - 4*c2*c3*c4^3 + 4*c1^2*c2*c3*c4^3 + 
  4*c1*c2^2*c3*c4^3 - 4*c1^2*c2^2*c3*c4^3 - 4*c3^2*c4^3 + 4*c1^2*c3^2*c4^3 + 
  4*c1*c2*c3^2*c4^3 - 4*c1^2*c2*c3^2*c4^3 + 4*c2^2*c3^2*c4^3 - 
  4*c1*c2^2*c3^2*c4^3 - 3*c4^4 + 3*c1^2*c4^4 + 3*c1*c2*c4^4 - 
  3*c1^2*c2*c4^4 + 3*c2^2*c4^4 - 3*c1*c2^2*c4^4 + 3*c1*c3*c4^4 - 
  3*c1^2*c3*c4^4 + 3*c2*c3*c4^4 - 6*c1*c2*c3*c4^4 + 3*c1^2*c2*c3*c4^4 - 
  3*c2^2*c3*c4^4 + 3*c1*c2^2*c3*c4^4 + 3*c3^2*c4^4 - 3*c1*c3^2*c4^4 - 
  3*c2*c3^2*c4^4 + 3*c1*c2*c3^2*c4^4 + 60*c4^4*g - 60*c1*c4^4*g - 
  60*c2*c4^4*g + 60*c1*c2*c4^4*g - 60*c3*c4^4*g + 60*c1*c3*c4^4*g + 
  60*c2*c3*c4^4*g - 60*c1*c2*c3*c4^4*g - 480*c4^3*g^2 + 480*c1*c4^3*g^2 + 
  480*c2*c4^3*g^2 - 480*c1*c2*c4^3*g^2 + 480*c3*c4^3*g^2 - 
  480*c1*c3*c4^3*g^2 - 480*c2*c3*c4^3*g^2 + 480*c1*c2*c3*c4^3*g^2 + 
  1440*c4^2*g^3 - 1440*c1*c4^2*g^3 - 1440*c2*c4^2*g^3 + 1440*c1*c2*c4^2*g^3 - 
  1440*c3*c4^2*g^3 + 1440*c1*c3*c4^2*g^3 + 1440*c2*c3*c4^2*g^3 - 
  1440*c1*c2*c3*c4^2*g^3 - 1440*c4*g^4 + 1440*c1*c4*g^4 + 1440*c2*c4*g^4 - 
  1440*c1*c2*c4*g^4 + 1440*c3*c4*g^4 - 1440*c1*c3*c4*g^4 - 
  1440*c2*c3*c4*g^4 + 1440*c1*c2*c3*c4*g^4 + 288*g^5 - 288*c1*g^5 - 
  288*c2*g^5 + 288*c1*c2*g^5 - 288*c3*g^5 + 288*c1*c3*g^5 + 288*c2*c3*g^5 - 
  288*c1*c2*c3*g^5 + 288*c1*c2*c3*c4*tau41 - 144*c1*c2*c4^2*tau41 - 
  144*c1*c3*c4^2*tau41 - 144*c2*c3*c4^2*tau41 + 96*c1*c4^3*tau41 + 
  96*c2*c4^3*tau41 + 96*c3*c4^3*tau41 - 72*c4^4*tau41 - 12*x + 12*c1^2*x + 
  12*c1*c2*x - 12*c1^2*c2*x + 12*c2^2*x - 12*c1*c2^2*x + 12*c1*c3*x - 
  12*c1^2*c3*x + 12*c2*c3*x - 24*c1*c2*c3*x + 12*c1^2*c2*c3*x - 
  12*c2^2*c3*x + 12*c1*c2^2*c3*x + 12*c3^2*x - 12*c1*c3^2*x - 12*c2*c3^2*x + 
  12*c1*c2*c3^2*x - 48*c4*x + 48*c1*c4*x + 48*c2*c4*x - 48*c1*c2*c4*x + 
  48*c3*c4*x - 48*c1*c3*c4*x - 48*c2*c3*c4*x + 24*c1*c2*c4^2*x + 
  24*c1*c3*c4^2*x + 24*c2*c3*c4^2*x - 16*c1*c4^3*x - 16*c2*c4^3*x - 
  16*c3*c4^3*x + 12*c4^4*x + 240*g*x - 240*c1*g*x - 240*c2*g*x + 
  240*c1*c2*g*x - 240*c3*g*x + 240*c1*c3*g*x + 240*c2*c3*g*x - 
  240*c1*c2*c3*g*x - 288*tau41*x + 48*x^2)/(12*(c1 - c4)*(-c2 + c4)*
  (-c3 + c4)*(1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + 
   c1*c4 + c2*c4 - c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 
   24*tau41 - 4*x));
 a45 = (6*c1*c2*c3*c4^2 - 2*c1*c2*c4^3 - 2*c1*c3*c4^3 - 2*c2*c3*c4^3 + 
  c1*c4^4 + c2*c4^4 + c3*c4^4 - 3*c4^5 + 60*c4^4*g - 480*c4^3*g^2 + 
  1440*c4^2*g^3 - 1440*c4*g^4 + 288*g^5 - 12*c1*x - 12*c2*x - 12*c3*x - 
  60*c4*x + 240*g*x)/(12*(1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - 
   c1*c2*c3 - c4 + c1*c4 + c2*c4 - c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + 
   c1*c2*c3*c4 + 24*tau41 - 4*x));
 b1 = (3 - 4*c2 + c2^2 - 4*c3 + 7*c2*c3 - 3*c2^2*c3 + c3^2 - 3*c2*c3^2 + 
  2*c2^2*c3^2 - 4*c4 + 7*c2*c4 - 3*c2^2*c4 + 7*c3*c4 - 18*c2*c3*c4 + 
  11*c2^2*c3*c4 - 3*c3^2*c4 + 11*c2*c3^2*c4 - 8*c2^2*c3^2*c4 + c4^2 - 
  3*c2*c4^2 + 2*c2^2*c4^2 - 3*c3*c4^2 + 11*c2*c3*c4^2 - 8*c2^2*c3*c4^2 + 
  2*c3^2*c4^2 - 8*c2*c3^2*c4^2 + 6*c2^2*c3^2*c4^2 - 60*g + 60*c2*g + 
  60*c3*g - 60*c2*c3*g + 60*c4*g - 60*c2*c4*g - 60*c3*c4*g + 60*c2*c3*c4*g + 
  480*g^2 - 480*c2*g^2 - 480*c3*g^2 + 480*c2*c3*g^2 - 480*c4*g^2 + 
  480*c2*c4*g^2 + 480*c3*c4*g^2 - 480*c2*c3*c4*g^2 - 1440*g^3 + 1440*c2*g^3 + 
  1440*c3*g^3 - 1440*c2*c3*g^3 + 1440*c4*g^3 - 1440*c2*c4*g^3 - 
  1440*c3*c4*g^3 + 1440*c2*c3*c4*g^3 + 1440*g^4 - 1440*c2*g^4 - 1440*c3*g^4 + 
  1440*c2*c3*g^4 - 1440*c4*g^4 + 1440*c2*c4*g^4 + 1440*c3*c4*g^4 - 
  1440*c2*c3*c4*g^4 - 288*g^5 + 288*c2*g^5 + 288*c3*g^5 - 288*c2*c3*g^5 + 
  288*c4*g^5 - 288*c2*c4*g^5 - 288*c3*c4*g^5 + 288*c2*c3*c4*g^5 + 144*tau41 - 
  96*c2*tau41 - 72*c2^2*tau41 - 96*c3*tau41 + 72*c2*c3*tau41 + 
  72*c2^2*c3*tau41 - 72*c3^2*tau41 + 72*c2*c3^2*tau41 - 96*c4*tau41 + 
  72*c2*c4*tau41 + 72*c2^2*c4*tau41 + 72*c3*c4*tau41 - 144*c2*c3*c4*tau41 - 
  72*c2^2*c3*c4*tau41 + 72*c3^2*c4*tau41 - 72*c2*c3^2*c4*tau41 - 
  72*c4^2*tau41 + 72*c2*c4^2*tau41 + 72*c3*c4^2*tau41 - 72*c2*c3*c4^2*tau41 - 
  1440*g*tau41 + 1440*c2*g*tau41 + 1440*c3*g*tau41 - 1440*c2*c3*g*tau41 + 
  1440*c4*g*tau41 - 1440*c2*c4*g*tau41 - 1440*c3*c4*g*tau41 + 
  1440*c2*c3*c4*g*tau41 + 1728*tau41^2 + 36*x - 32*c2*x - 32*c3*x + 
  24*c2*c3*x - 32*c4*x + 24*c2*c4*x + 24*c3*c4*x - 288*tau41*x)/
 (12*(c1 - c2)*(c1 - c3)*(c1 - c4)*(1 - c1 - c2 + c1*c2 - c3 + c1*c3 + 
   c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - c1*c2*c4 + c3*c4 - c1*c3*c4 - 
   c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 b2 = -(3 - 4*c1 + c1^2 - 4*c3 + 7*c1*c3 - 3*c1^2*c3 + c3^2 - 3*c1*c3^2 + 
   2*c1^2*c3^2 - 4*c4 + 7*c1*c4 - 3*c1^2*c4 + 7*c3*c4 - 18*c1*c3*c4 + 
   11*c1^2*c3*c4 - 3*c3^2*c4 + 11*c1*c3^2*c4 - 8*c1^2*c3^2*c4 + c4^2 - 
   3*c1*c4^2 + 2*c1^2*c4^2 - 3*c3*c4^2 + 11*c1*c3*c4^2 - 8*c1^2*c3*c4^2 + 
   2*c3^2*c4^2 - 8*c1*c3^2*c4^2 + 6*c1^2*c3^2*c4^2 - 60*g + 60*c1*g + 
   60*c3*g - 60*c1*c3*g + 60*c4*g - 60*c1*c4*g - 60*c3*c4*g + 60*c1*c3*c4*g + 
   480*g^2 - 480*c1*g^2 - 480*c3*g^2 + 480*c1*c3*g^2 - 480*c4*g^2 + 
   480*c1*c4*g^2 + 480*c3*c4*g^2 - 480*c1*c3*c4*g^2 - 1440*g^3 + 
   1440*c1*g^3 + 1440*c3*g^3 - 1440*c1*c3*g^3 + 1440*c4*g^3 - 
   1440*c1*c4*g^3 - 1440*c3*c4*g^3 + 1440*c1*c3*c4*g^3 + 1440*g^4 - 
   1440*c1*g^4 - 1440*c3*g^4 + 1440*c1*c3*g^4 - 1440*c4*g^4 + 
   1440*c1*c4*g^4 + 1440*c3*c4*g^4 - 1440*c1*c3*c4*g^4 - 288*g^5 + 
   288*c1*g^5 + 288*c3*g^5 - 288*c1*c3*g^5 + 288*c4*g^5 - 288*c1*c4*g^5 - 
   288*c3*c4*g^5 + 288*c1*c3*c4*g^5 + 144*tau41 - 96*c1*tau41 - 
   72*c1^2*tau41 - 96*c3*tau41 + 72*c1*c3*tau41 + 72*c1^2*c3*tau41 - 
   72*c3^2*tau41 + 72*c1*c3^2*tau41 - 96*c4*tau41 + 72*c1*c4*tau41 + 
   72*c1^2*c4*tau41 + 72*c3*c4*tau41 - 144*c1*c3*c4*tau41 - 
   72*c1^2*c3*c4*tau41 + 72*c3^2*c4*tau41 - 72*c1*c3^2*c4*tau41 - 
   72*c4^2*tau41 + 72*c1*c4^2*tau41 + 72*c3*c4^2*tau41 - 
   72*c1*c3*c4^2*tau41 - 1440*g*tau41 + 1440*c1*g*tau41 + 1440*c3*g*tau41 - 
   1440*c1*c3*g*tau41 + 1440*c4*g*tau41 - 1440*c1*c4*g*tau41 - 
   1440*c3*c4*g*tau41 + 1440*c1*c3*c4*g*tau41 + 1728*tau41^2 + 36*x - 
   32*c1*x - 32*c3*x + 24*c1*c3*x - 32*c4*x + 24*c1*c4*x + 24*c3*c4*x - 
   288*tau41*x)/(12*(c1 - c2)*(c2 - c3)*(c2 - c4)*
  (1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - 
   c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 b3 = -(3 - 4*c1 + c1^2 - 4*c2 + 7*c1*c2 - 3*c1^2*c2 + c2^2 - 3*c1*c2^2 + 
   2*c1^2*c2^2 - 4*c4 + 7*c1*c4 - 3*c1^2*c4 + 7*c2*c4 - 18*c1*c2*c4 + 
   11*c1^2*c2*c4 - 3*c2^2*c4 + 11*c1*c2^2*c4 - 8*c1^2*c2^2*c4 + c4^2 - 
   3*c1*c4^2 + 2*c1^2*c4^2 - 3*c2*c4^2 + 11*c1*c2*c4^2 - 8*c1^2*c2*c4^2 + 
   2*c2^2*c4^2 - 8*c1*c2^2*c4^2 + 6*c1^2*c2^2*c4^2 - 60*g + 60*c1*g + 
   60*c2*g - 60*c1*c2*g + 60*c4*g - 60*c1*c4*g - 60*c2*c4*g + 60*c1*c2*c4*g + 
   480*g^2 - 480*c1*g^2 - 480*c2*g^2 + 480*c1*c2*g^2 - 480*c4*g^2 + 
   480*c1*c4*g^2 + 480*c2*c4*g^2 - 480*c1*c2*c4*g^2 - 1440*g^3 + 
   1440*c1*g^3 + 1440*c2*g^3 - 1440*c1*c2*g^3 + 1440*c4*g^3 - 
   1440*c1*c4*g^3 - 1440*c2*c4*g^3 + 1440*c1*c2*c4*g^3 + 1440*g^4 - 
   1440*c1*g^4 - 1440*c2*g^4 + 1440*c1*c2*g^4 - 1440*c4*g^4 + 
   1440*c1*c4*g^4 + 1440*c2*c4*g^4 - 1440*c1*c2*c4*g^4 - 288*g^5 + 
   288*c1*g^5 + 288*c2*g^5 - 288*c1*c2*g^5 + 288*c4*g^5 - 288*c1*c4*g^5 - 
   288*c2*c4*g^5 + 288*c1*c2*c4*g^5 + 144*tau41 - 96*c1*tau41 - 
   72*c1^2*tau41 - 96*c2*tau41 + 72*c1*c2*tau41 + 72*c1^2*c2*tau41 - 
   72*c2^2*tau41 + 72*c1*c2^2*tau41 - 96*c4*tau41 + 72*c1*c4*tau41 + 
   72*c1^2*c4*tau41 + 72*c2*c4*tau41 - 144*c1*c2*c4*tau41 - 
   72*c1^2*c2*c4*tau41 + 72*c2^2*c4*tau41 - 72*c1*c2^2*c4*tau41 - 
   72*c4^2*tau41 + 72*c1*c4^2*tau41 + 72*c2*c4^2*tau41 - 
   72*c1*c2*c4^2*tau41 - 1440*g*tau41 + 1440*c1*g*tau41 + 1440*c2*g*tau41 - 
   1440*c1*c2*g*tau41 + 1440*c4*g*tau41 - 1440*c1*c4*g*tau41 - 
   1440*c2*c4*g*tau41 + 1440*c1*c2*c4*g*tau41 + 1728*tau41^2 + 36*x - 
   32*c1*x - 32*c2*x + 24*c1*c2*x - 32*c4*x + 24*c1*c4*x + 24*c2*c4*x - 
   288*tau41*x)/(12*(c2 - c3)*(-c1 + c3)*(c3 - c4)*
  (1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - 
   c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 b4 = -(3 - 4*c1 + c1^2 - 4*c2 + 7*c1*c2 - 3*c1^2*c2 + c2^2 - 3*c1*c2^2 + 
   2*c1^2*c2^2 - 4*c3 + 7*c1*c3 - 3*c1^2*c3 + 7*c2*c3 - 18*c1*c2*c3 + 
   11*c1^2*c2*c3 - 3*c2^2*c3 + 11*c1*c2^2*c3 - 8*c1^2*c2^2*c3 + c3^2 - 
   3*c1*c3^2 + 2*c1^2*c3^2 - 3*c2*c3^2 + 11*c1*c2*c3^2 - 8*c1^2*c2*c3^2 + 
   2*c2^2*c3^2 - 8*c1*c2^2*c3^2 + 6*c1^2*c2^2*c3^2 - 60*g + 60*c1*g + 
   60*c2*g - 60*c1*c2*g + 60*c3*g - 60*c1*c3*g - 60*c2*c3*g + 60*c1*c2*c3*g + 
   480*g^2 - 480*c1*g^2 - 480*c2*g^2 + 480*c1*c2*g^2 - 480*c3*g^2 + 
   480*c1*c3*g^2 + 480*c2*c3*g^2 - 480*c1*c2*c3*g^2 - 1440*g^3 + 
   1440*c1*g^3 + 1440*c2*g^3 - 1440*c1*c2*g^3 + 1440*c3*g^3 - 
   1440*c1*c3*g^3 - 1440*c2*c3*g^3 + 1440*c1*c2*c3*g^3 + 1440*g^4 - 
   1440*c1*g^4 - 1440*c2*g^4 + 1440*c1*c2*g^4 - 1440*c3*g^4 + 
   1440*c1*c3*g^4 + 1440*c2*c3*g^4 - 1440*c1*c2*c3*g^4 - 288*g^5 + 
   288*c1*g^5 + 288*c2*g^5 - 288*c1*c2*g^5 + 288*c3*g^5 - 288*c1*c3*g^5 - 
   288*c2*c3*g^5 + 288*c1*c2*c3*g^5 + 144*tau41 - 96*c1*tau41 - 
   72*c1^2*tau41 - 96*c2*tau41 + 72*c1*c2*tau41 + 72*c1^2*c2*tau41 - 
   72*c2^2*tau41 + 72*c1*c2^2*tau41 - 96*c3*tau41 + 72*c1*c3*tau41 + 
   72*c1^2*c3*tau41 + 72*c2*c3*tau41 - 144*c1*c2*c3*tau41 - 
   72*c1^2*c2*c3*tau41 + 72*c2^2*c3*tau41 - 72*c1*c2^2*c3*tau41 - 
   72*c3^2*tau41 + 72*c1*c3^2*tau41 + 72*c2*c3^2*tau41 - 
   72*c1*c2*c3^2*tau41 - 1440*g*tau41 + 1440*c1*g*tau41 + 1440*c2*g*tau41 - 
   1440*c1*c2*g*tau41 + 1440*c3*g*tau41 - 1440*c1*c3*g*tau41 - 
   1440*c2*c3*g*tau41 + 1440*c1*c2*c3*g*tau41 + 1728*tau41^2 + 36*x - 
   32*c1*x - 32*c2*x + 24*c1*c2*x - 32*c3*x + 24*c1*c3*x + 24*c2*c3*x - 
   288*tau41*x)/(12*(c2 - c4)*(-c1 + c4)*(-c3 + c4)*
  (1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + c1*c4 + c2*c4 - 
   c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 24*tau41 - 4*x));
 b5 = (-3*c1 - 3*c2 + 4*c1*c2 - 3*c3 + 4*c1*c3 + 4*c2*c3 - 6*c1*c2*c3 - 
  3*c4 + 4*c1*c4 + 4*c2*c4 - 6*c1*c2*c4 + 4*c3*c4 - 6*c1*c3*c4 - 6*c2*c3*c4 + 
  12*c1*c2*c3*c4 + 60*g - 480*g^2 + 1440*g^3 - 1440*g^4 + 288*g^5 - 
  72*c1*tau41 - 72*c2*tau41 - 72*c3*tau41 - 72*c4*tau41 + 1440*g*tau41 - 
  48*x)/(12*(1 - c1 - c2 + c1*c2 - c3 + c1*c3 + c2*c3 - c1*c2*c3 - c4 + 
   c1*c4 + c2*c4 - c1*c2*c4 + c3*c4 - c1*c3*c4 - c2*c3*c4 + c1*c2*c3*c4 + 
   24*tau41 - 4*x));
 c1 = c1;
 c2 = c2;
 c3 = c3;
 c4 = c4;
 c5 = 1;

(*
 Eint1 = ((-192*x + 8*c1^6*y^2 - 240*c1^5*g*y^2 + 2640*c1^4*g^2*y^2 - 
   13440*c1^3*g^3*y^2 + 31680*c1^2*g^4*y^2 - 28800*c1*g^5*y^2 + 
   5760*g^6*y^2 + 96*c1^2*x*y^2 - 960*c1*g*x*y^2 + 1920*g^2*x*y^2 - 
   c1^8*y^4 + 40*c1^7*g*y^4 - 640*c1^6*g^2*y^4 + 5280*c1^5*g^3*y^4 - 
   24240*c1^4*g^4*y^4 + 62400*c1^3*g^5*y^4 - 86400*c1^2*g^6*y^4 + 
   57600*c1*g^7*y^4 - 11520*g^8*y^4 - 8*c1^4*x*y^4 + 160*c1^3*g*x*y^4 - 
   960*c1^2*g^2*x*y^4 + 1920*c1*g^3*x*y^4 - 960*g^4*x*y^4 - 16*x^2*y^4 + 
   576*g^10*y^6));

 Eint2 = ((-192*x + 8*c2^6*y^2 - 240*c2^5*g*y^2 + 2640*c2^4*g^2*y^2 - 
   13440*c2^3*g^3*y^2 + 31680*c2^2*g^4*y^2 - 28800*c2*g^5*y^2 + 
   5760*g^6*y^2 + 96*c2^2*x*y^2 - 960*c2*g*x*y^2 + 1920*g^2*x*y^2 - 
   c2^8*y^4 + 40*c2^7*g*y^4 - 640*c2^6*g^2*y^4 + 5280*c2^5*g^3*y^4 - 
   24240*c2^4*g^4*y^4 + 62400*c2^3*g^5*y^4 - 86400*c2^2*g^6*y^4 + 
   57600*c2*g^7*y^4 - 11520*g^8*y^4 - 8*c2^4*x*y^4 + 160*c2^3*g*x*y^4 - 
   960*c2^2*g^2*x*y^4 + 1920*c2*g^3*x*y^4 - 960*g^4*x*y^4 - 16*x^2*y^4 + 
   576*g^10*y^6));

 Eint3 = ((-192*x + 8*c3^6*y^2 - 240*c3^5*g*y^2 + 2640*c3^4*g^2*y^2 - 
   13440*c3^3*g^3*y^2 + 31680*c3^2*g^4*y^2 - 28800*c3*g^5*y^2 + 
   5760*g^6*y^2 + 96*c3^2*x*y^2 - 960*c3*g*x*y^2 + 1920*g^2*x*y^2 - 
   c3^8*y^4 + 40*c3^7*g*y^4 - 640*c3^6*g^2*y^4 + 5280*c3^5*g^3*y^4 - 
   24240*c3^4*g^4*y^4 + 62400*c3^3*g^5*y^4 - 86400*c3^2*g^6*y^4 + 
   57600*c3*g^7*y^4 - 11520*g^8*y^4 - 8*c3^4*x*y^4 + 160*c3^3*g*x*y^4 - 
   960*c3^2*g^2*x*y^4 + 1920*c3*g^3*x*y^4 - 960*g^4*x*y^4 - 16*x^2*y^4 + 
   576*g^10*y^6));

 Eint4 = ((-192*x + 8*c4^6*y^2 - 240*c4^5*g*y^2 + 2640*c4^4*g^2*y^2 - 
   13440*c4^3*g^3*y^2 + 31680*c4^2*g^4*y^2 - 28800*c4*g^5*y^2 + 
   5760*g^6*y^2 + 96*c4^2*x*y^2 - 960*c4*g*x*y^2 + 1920*g^2*x*y^2 - 
   c4^8*y^4 + 40*c4^7*g*y^4 - 640*c4^6*g^2*y^4 + 5280*c4^5*g^3*y^4 - 
   24240*c4^4*g^4*y^4 + 62400*c4^3*g^5*y^4 - 86400*c4^2*g^6*y^4 + 
   57600*c4*g^7*y^4 - 11520*g^8*y^4 - 8*c4^4*x*y^4 + 160*c4^3*g*x*y^4 - 
   960*c4^2*g^2*x*y^4 + 1920*c4*g^3*x*y^4 - 960*g^4*x*y^4 - 16*x^2*y^4 + 
   576*g^10*y^6));

 Eint5 = ((-1152*tau41 + 8*y^2 - 240*g*y^2 + 2640*g^2*y^2 - 
   13440*g^3*y^2 + 31680*g^4*y^2 - 28800*g^5*y^2 + 5760*g^6*y^2 + 
   576*tau41*y^2 - 5760*g*tau41*y^2 + 11520*g^2*tau41*y^2 - y^4 + 40*g*y^4 - 
   640*g^2*y^4 + 5280*g^3*y^4 - 24240*g^4*y^4 + 62400*g^5*y^4 - 
   86400*g^6*y^4 + 57600*g^7*y^4 - 11520*g^8*y^4 - 48*tau41*y^4 + 
   960*g*tau41*y^4 - 5760*g^2*tau41*y^4 + 11520*g^3*tau41*y^4 - 
   5760*g^4*tau41*y^4 - 576*tau41^2*y^4 + 576*g^10*y^6));
*)

(* ================================================================= *)
 a11 = Factor[ a11];  a12 = Factor[ a12];   a13 = Factor[ a13];  a14 = Factor[ a14];  a15 = Factor[ a15];
 a21 = Factor[ a21];  a22 = Factor[ a22];   a23 = Factor[ a23];  a24 = Factor[ a24];  a25 = Factor[ a25];
 a31 = Factor[ a31];  a32 = Factor[ a32];   a33 = Factor[ a33];  a34 = Factor[ a34];  a35 = Factor[ a35];
 a41 = Factor[ a41];  a42 = Factor[ a42];   a43 = Factor[ a43];  a44 = Factor[ a44];  a45 = Factor[ a45];
  b1 = Factor[  b1];   b2 = Factor[  b2];    b3 = Factor[  b3];   b4 = Factor[  b4];   b5 = Factor[  b5];
(* ================================================================= *)

minA = Min[N[a]];
minB = Min[N[b]];
dd   = Max[Abs[N[a]]];

(* Print["D = ", N[dd]]; *)
If[ dd < ddmax,

(* ============================ Compute Internal E(z) ============================ *)
Rintl = Inverse[ IdentityMatrix[S] - z*a ].e ;
Pintl = Numerator[   Rintl ];
Qintl = Denominator[ Rintl ];
Clear[ Rintl ];

Pintl = Factor[ Pintl ];
Qintl = Factor[ Qintl ];

Eint = (Qintl /. z -> (+I*y))*(Qintl /. z -> (-I*y)) -
       (Pintl /. z -> (+I*y))*(Pintl /. z -> (-I*y));

Clear[ Pintl ]; Clear[ Qintl ];

Eint1 = Factor[ Eint[[1]] ]; Eint2 = Factor[ Eint[[2]] ]; 
Eint3 = Factor[ Eint[[3]] ]; Eint4 = Factor[ Eint[[4]] ]; 
Eint5 = Factor[ Eint[[5]] ];
Clear[ Eint ];

(* ======================================================================== *)
(* ======================================================================== *)
(* ======================================================================== *)

Eint1 = Factor[ Eint1/y^4 ]; 
ans1 = DeleteDuplicates[ NSolve[Eint1==0,y]];
len = Length[ans1]; ii = 1;
Do[ If[ Im[Part[N[y,500] /. ans1, ii]] != 0, ans1 = Drop[ans1,{ii}]; , ii= ii+1]; ,{i,1,len}];
Clear[Eint1]; 


Eint2 = Factor[ Eint2/y^4 ]; 
ans2 = DeleteDuplicates[ NSolve[Eint2==0,y]];
len = Length[ans2]; ii = 1;
Do[ If[ Im[Part[N[y,500] /. ans2, ii]] != 0, ans2 = Drop[ans2,{ii}]; , ii= ii+1]; ,{i,1,len}];
Clear[Eint2]; 


Eint3 = Factor[ Eint3/y^4 ]; 
ans3 = DeleteDuplicates[ NSolve[Eint3==0,y]];
len = Length[ans3]; ii = 1;
Do[ If[ Im[Part[N[y,500] /. ans3, ii]] != 0, ans3 = Drop[ans3,{ii}]; , ii= ii+1]; ,{i,1,len}];
Clear[Eint3]; 


Eint4 = Factor[ Eint4/y^4 ]; 
ans4 = DeleteDuplicates[ NSolve[Eint4==0,y]];
len = Length[ans4]; ii = 1;
Do[ If[ Im[Part[N[y,500] /. ans4, ii]] != 0, ans4 = Drop[ans4,{ii}]; , ii= ii+1]; ,{i,1,len}];
Clear[Eint4]; 


Eint5 = Factor[ Eint5/y^4 ]; 
ans5 = DeleteDuplicates[ NSolve[Eint5==0,y]];
len = Length[ans5]; ii = 1;
Do[ If[ Im[Part[N[y,500] /. ans5, ii]] != 0, ans5 = Drop[ans5,{ii}]; , ii= ii+1]; ,{i,1,len}];
Clear[Eint5]; 


(* ======================================================================== *)

len = Length[ans1]; jj = 1;
Do[ If[ Im[Part[N[y,500] /. ans1, jj]] == 0 && Re[Part[N[y,500] /. ans1, jj]] == 0, ans1 = Drop[ans1,{jj}]; , jj= jj+1]; ,{i,1,len}];

len = Length[ans2]; jj = 1;
Do[ If[ Im[Part[N[y,500] /. ans2, jj]] == 0 && Re[Part[N[y,500] /. ans2, jj]] == 0, ans2 = Drop[ans2,{jj}]; , jj= jj+1]; ,{i,1,len}];

len = Length[ans3]; jj = 1;
Do[ If[ Im[Part[N[y,500] /. ans3, jj]] == 0 && Re[Part[N[y,500] /. ans3, jj]] == 0, ans3 = Drop[ans3,{jj}]; , jj= jj+1]; ,{i,1,len}];

len = Length[ans4]; jj = 1;
Do[ If[ Im[Part[N[y,500] /. ans4, jj]] == 0 && Re[Part[N[y,500] /. ans4, jj]] == 0, ans4 = Drop[ans4,{jj}]; , jj= jj+1]; ,{i,1,len}];

len = Length[ans5]; jj = 1;
Do[ If[ Im[Part[N[y,500] /. ans5, jj]] == 0 && Re[Part[N[y,500] /. ans5, jj]] == 0, ans5 = Drop[ans5,{jj}]; , jj= jj+1]; ,{i,1,len}];

ansEint = DeleteDuplicates[ Flatten[{ans1,ans2,ans3,ans4,ans5}]];
lenans  = {Length[ans1],Length[ans2],Length[ans3],Length[ans4],Length[ans5]};
(* Print["Length of Answers = ",lenans]; *)

If[ Length[ansEint] < lenMax,

cmin = Min[c];
cmax = Max[Drop[c,-1]];
If[ cmin < ccmin, ccmin = cmin;, dog=3];
If[ cmax > ccmax, ccmax = cmax;, dog=3];

(* ======================================================================== *)
(* ======================================================================== *)
(* ======================================================================== *)

cc = DiagonalMatrix[c];
cc2 = cc.cc;

t11 = Factor[ b.e         - 1/1!];
t21 = Factor[ b.c         - 1/2!];
t31 = Factor[ b.c^2/2     - 1/3!]; t32 = Factor[ b.a.c         - 1/3!];
t41 = Factor[ b.c^3/6     - 1/4!]; t42 = Factor[ (b*c).a.c     - 3/4!];
t43 = Factor[ b.a.c^2/2   - 1/4!]; t44 = Factor[ b.a.a.c       - 1/4!];

t51 = Factor[ b.c^4/24      - 1/5!]; t52 = Factor[ (b*c^2).a.c/2 - 6/5!];
t53 = Factor[ b.(a.c)^2/2   - 3/5!]; t54 = Factor[ (b*c).a.c^2/2 - 4/5!];
t55 = Factor[ b.a.c^3/6     - 1/5!]; t56 = Factor[ (b*c).a.a.c   - 4/5!];
t57 = Factor[ b.a.cc.a.c    - 3/5!]; t58 = Factor[ b.a.a.c^2/2   - 1/5!];
t59 = Factor[ b.a.a.a.c     - 1/5!];

bc   = Factor[ b*c ];
bc2  = Factor[ b*c^2 ];
bc3  = Factor[ b*c^3 ];
ba   = Factor[ b.a ];
baa  = Factor[ ba.a ];
ac   = Factor[ a.c ];
aac  = Factor[ a.a.c ];
bac  = Factor[ ba*c ];
baac = Factor[ baa*c ];
aa   = Factor[ a.a ];

t61  = Factor[ b.c^5/120          -  1/6! ]; t62  = Factor[ (bc3).ac/6         - 10/6! ];
t63  = Factor[ (bc).(ac)^2/2      - 15/6! ]; t64  = Factor[ (bc2).a.c^2/4      - 10/6! ];
t65  = Factor[ b.((a.c^2)*(ac))/2 - 10/6! ]; t66  = Factor[ (bc).a.c^3/6       -  5/6! ];
t67  = Factor[ ba.c^4/24          -  1/6! ]; t68  = Factor[ (bc2).aa.c/2       - 10/6! ];
t69  = Factor[ b.((aa.c)*(ac))    - 10/6! ]; t610 = Factor[ (bc).a.(c*(ac))    - 15/6! ];
t611 = Factor[ ba.(ac*c^2)/2      -  6/6! ]; t612 = Factor[ ba.(ac)^2/2        -  3/6! ];
t613 = Factor[ (bc).aa.c^2/2      -  5/6! ]; t614 = Factor[ bac.(a.c^2)/2      -  4/6! ];
t615 = Factor[ ba.a.c^3/6         -  1/6! ]; t616 = Factor[ (bc).aa.ac         -  5/6! ];
t617 = Factor[ bac.aac            -  4/6! ]; t618 = Factor[ baac.ac            -  3/6! ];
t619 = Factor[ ba.aa.c^2/2        -  1/6! ]; t620 = Factor[ ba.aa.ac           -  1/6! ];

t1 = {t11};
t2 = {t21};
t3 = {t31,t32};
t4 = {t41,t42,t43,t44};
t5 = {t51,t52,t53,t54,t55,t56,t57,t58,t59};
t6 = {t61,t62,t63,t64,t65,t66,t67,t68,t69,t610,t611,t612,t613,t614,t615,t616,t617,t618,t619,t620};
A1 = Sqrt[t1.t1]; A2 = Sqrt[t2.t2]; A3 = Sqrt[t3.t3]; A4 = Sqrt[t4.t4]; A5 = Sqrt[t5.t5]; A6 = Sqrt[t6.t6];

q1 = Factor[ a.e   - c      ]; q2 = Factor[ a.c   - c^2/2  ];
q3 = Factor[ a.c^2 - c^3/3  ]; q4 = Factor[ a.c^3 - c^4/4  ];
q5 = Factor[ a.c^4 - c^5/5  ]; q6 = Factor[ a.c^5 - c^6/6  ];

tt11 = Factor[ q1 ];
tt21 = Factor[ q2 ];
tt31 = Factor[ q3/2 ];
tt32 = Factor[ a.q2 + q3/2 ];
tt41 = Factor[ q4/6 ];
tt42 = Factor[ a.cc.q2 + q4/2 ];
tt43 = Factor[ a.q3/2 + q4/6 ];
tt44 = Factor[ a.a.q2 + a.q3/2 + q4/6 ];

tt51 = Factor[ q5/24 ];
tt52 = Factor[ a.cc2.q2/2 + q5/4 ];
tt53 = Factor[ a.cc2.q2/2 + a.q2^2/2 + q5/8];
tt54 = Factor[ a.cc.q3/2 + q5/6 ];
tt55 = Factor[ a.q4/6 + q5/24 ];
tt56 = Factor[ a.cc.a.q2 + a.cc.q3/2 + q5/6 ];
tt57 = Factor[ a.a.cc.q2 + a.q4/2 + q5/8 ];
tt58 = Factor[ a.a.q3/2 + a.q4/6 + q5/24 ];
tt59 = Factor[ tt58 + a.a.a.q2 ];

tt1 = {tt11};
tt2 = {tt21};
tt3 = {tt31,tt32};
tt4 = {tt41,tt42,tt43,tt44};
tt5 = {tt51,tt52,tt53,tt54,tt55,tt56,tt57,tt58,tt59};

e1 = Table[1,Length[tt1]];
e2 = Table[1,Length[tt2]];
e3 = Table[1,Length[tt3]];
e4 = Table[1,Length[tt4]];
e5 = Table[1,Length[tt5]];

AA1 = Sqrt[e1.(tt1*tt1)];
AA2 = Sqrt[e2.(tt2*tt2)];
AA3 = Sqrt[e3.(tt3*tt3)];
AA4 = Sqrt[e4.(tt4*tt4)];
AA5 = Sqrt[e5.(tt5*tt5)];

m = Factor[b*a + Transpose[b*a] - Outer[Times,b,b]];
eigm = Factor[Eigenvalues[N[m,1000]]];
mineigm = Min[N[eigm]];

(* Print["Minimim Eig(M) = ",N[mineigm]]; *)

If[ mineigm > mMin,

mm = IdentityMatrix[S];
mmm = e;
Do[Do[Do[ mm[[j,k]] = a[[i,j]]*a[[j,k]] + a[[i,k]]*a[[k,j]] - a[[i,j]]*a[[i,k]];, {j,1,S}];, {k,1,S}];
mmm[[i]] = Min[N[Eigenvalues[mm]]];, {i,1,S}];
mmm2 = Sqrt[mmm.mmm];
mineigIntm = Min[N[mmm]];

If[ mineigIntm > mMinInt,

Print[" ============================ "];
Print["{A1,A2,A3,A4,A5,A6} = ", N[{A1,A2,A3,A4,A5,A6}],", g = ",N[g],", {tau41,x,fac} = ",N[{tau41,x,fac}]];
Print["{AA1} = ", N[{AA1}]];
Print["{AA2} = ", N[{AA2}]];
Print["{AA3} = ", N[{AA3}]];
Print["{AA4} = ", N[{AA4}]];
Print["{AA5} = ", N[{AA5}]];
Print["All Roots of All Eints = ",ansEint];
Print["Length of Roots of ALL Eints = ",lenans];
Print["c = ", N[{c1,c2,c3,c4,c5}]];
Print["c = ",c,",  {cmin,cmax} = ",N[{ccmin,ccmax}]];
Print["D = ",N[dd,2],"   Min{a,b} = ",N[{minA,minB},2],"   Min. Eig(M) = ", mineigm,"  Cmeasure = ",N[cmeasure,2]];
Print["Min. Eig(M)int = ", N[mmm,5]];
Print[" ============================ "];

If[ print ==1,
ss = Part[JordanDecomposition[a],1];
jj = Part[JordanDecomposition[a],2];
si = Inverse[ss];
Print["S      = ", MatrixForm[ N[ss]]];
Print["S^(-1) = ", MatrixForm[ N[si]]];
Print["Jordan = ", MatrixForm[ N[jj]]];

ss = Rationalize[ N[ss,100],10^(-35)];
si = Rationalize[ N[si,100],10^(-35)];
jj = Rationalize[ N[jj,100],10^(-35)];
a  = Rationalize[ N[ a,100],10^(-35)];
b  = Rationalize[ N[ b,100],10^(-35)];

Do[Do[ Print["      a(",i,",",j,") = ",   Numerator[ a[[i,j]]],".d0/",Denominator[ a[[i,j]]],".d0"];,{i,1,S}],{j,1,S}];
Print["c ======="];
   Do[ Print["      b(",j,") = ",         Numerator[ b[[  j]]],".d0/",Denominator[ b[[  j]]],".d0"];,{j,1,S}];
Print["c ======="];
   Do[ Print["      c(",j,") = ",         Numerator[ c[[  j]]],".d0/",Denominator[ c[[  j]]],".d0"];,{j,1,S}];
Print["c ======="];
       Print["      g = ",                Numerator[g],".d0/",Denominator[g],".d0"];
Print["c ======="];
Do[Do[ Print["      s(",i,",",j,") = ",   Numerator[ss[[i,j]]],".d0/",Denominator[ss[[i,j]]],".d0"];,{i,1,S}],{j,1,S}];
Print["c ======="];
Do[Do[ Print["      sinv(",i,",",j,") = ",Numerator[si[[i,j]]],".d0/",Denominator[si[[i,j]]],".d0"];,{i,1,S}],{j,1,S}];
Print["c ======="];
Do[Do[ Print["      jcf(",i,",",j,") = ", Numerator[jj[[i,j]]],".d0/",Denominator[jj[[i,j]]],".d0"];,{i,1,S}],{j,1,S}];
Print["c ======="];
, dog=1];

, dog=2];
, dog=3];
, dog=4];
, dog=5];
, dog=6];


Clear[a]; Clear[b]; Clear[c]; Clear[e]; Clear[g]; Clear[x]; Clear[tau51]; Clear[y];

Clear[a11]; Clear[a12]; Clear[a13]; Clear[a14]; Clear[a15]; Clear[a16];
Clear[a21]; Clear[a22]; Clear[a23]; Clear[a24]; Clear[a25]; Clear[a26];
Clear[a31]; Clear[a32]; Clear[a33]; Clear[a34]; Clear[a35]; Clear[a36];
Clear[a41]; Clear[a42]; Clear[a43]; Clear[a44]; Clear[a45]; Clear[a46];
Clear[a51]; Clear[a52]; Clear[a53]; Clear[a54]; Clear[a55]; Clear[a56];
Clear[ b1]; Clear[ b2]; Clear[ b3]; Clear[ b4]; Clear[ b5]; Clear[ b6];
Clear[ c1]; Clear[ c2]; Clear[ c3]; Clear[ c4]; Clear[ c5]; Clear[ c6];
Clear[ans1]; Clear[ans2]; Clear[ans3]; Clear[ans4]; Clear[ans5]; Clear[ans6]; 

Clear[Eint1]; Clear[Eint2]; Clear[Eint3]; Clear[Eint4]; Clear[Eint5]; Clear[Eint6]; Clear[Eint];

Clear[ ansEint ]; Clear[ lenans ];

Clear[ bc   ]; Clear[ bc2  ]; Clear[ bc3  ]; Clear[ ba   ]; Clear[ baa  ];
Clear[ ac   ]; Clear[ aac  ]; Clear[ bac  ]; Clear[ baac ]; Clear[ aa   ];

,{kkk,1,1000000000}];
